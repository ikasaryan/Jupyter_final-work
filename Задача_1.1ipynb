{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyOV7A8aAKefyuZ2HO2vQ1c3",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/ikasaryan/Jupyter_final-work/blob/main/%D0%97%D0%B0%D0%B4%D0%B0%D1%87%D0%B0_2.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from google.colab import files\n",
        "uploaded = files.upload()\n",
        "file_name = list(uploaded.keys())[0] # Get the name of the uploaded file\n",
        "df = pd.read_csv(file_name) # Use the file name to read the CSV\n",
        "print(df.head())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 600
        },
        "id": "6TZjjCHC3Oeg",
        "outputId": "62bd9d6e-327c-41fe-fefd-18212d784bca"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "\n",
              "     <input type=\"file\" id=\"files-15556c73-445f-419a-af85-8d9a5e7ecd40\" name=\"files[]\" multiple disabled\n",
              "        style=\"border:none\" />\n",
              "     <output id=\"result-15556c73-445f-419a-af85-8d9a5e7ecd40\">\n",
              "      Upload widget is only available when the cell has been executed in the\n",
              "      current browser session. Please rerun this cell to enable.\n",
              "      </output>\n",
              "      <script>// Copyright 2017 Google LLC\n",
              "//\n",
              "// Licensed under the Apache License, Version 2.0 (the \"License\");\n",
              "// you may not use this file except in compliance with the License.\n",
              "// You may obtain a copy of the License at\n",
              "//\n",
              "//      http://www.apache.org/licenses/LICENSE-2.0\n",
              "//\n",
              "// Unless required by applicable law or agreed to in writing, software\n",
              "// distributed under the License is distributed on an \"AS IS\" BASIS,\n",
              "// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
              "// See the License for the specific language governing permissions and\n",
              "// limitations under the License.\n",
              "\n",
              "/**\n",
              " * @fileoverview Helpers for google.colab Python module.\n",
              " */\n",
              "(function(scope) {\n",
              "function span(text, styleAttributes = {}) {\n",
              "  const element = document.createElement('span');\n",
              "  element.textContent = text;\n",
              "  for (const key of Object.keys(styleAttributes)) {\n",
              "    element.style[key] = styleAttributes[key];\n",
              "  }\n",
              "  return element;\n",
              "}\n",
              "\n",
              "// Max number of bytes which will be uploaded at a time.\n",
              "const MAX_PAYLOAD_SIZE = 100 * 1024;\n",
              "\n",
              "function _uploadFiles(inputId, outputId) {\n",
              "  const steps = uploadFilesStep(inputId, outputId);\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  // Cache steps on the outputElement to make it available for the next call\n",
              "  // to uploadFilesContinue from Python.\n",
              "  outputElement.steps = steps;\n",
              "\n",
              "  return _uploadFilesContinue(outputId);\n",
              "}\n",
              "\n",
              "// This is roughly an async generator (not supported in the browser yet),\n",
              "// where there are multiple asynchronous steps and the Python side is going\n",
              "// to poll for completion of each step.\n",
              "// This uses a Promise to block the python side on completion of each step,\n",
              "// then passes the result of the previous step as the input to the next step.\n",
              "function _uploadFilesContinue(outputId) {\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  const steps = outputElement.steps;\n",
              "\n",
              "  const next = steps.next(outputElement.lastPromiseValue);\n",
              "  return Promise.resolve(next.value.promise).then((value) => {\n",
              "    // Cache the last promise value to make it available to the next\n",
              "    // step of the generator.\n",
              "    outputElement.lastPromiseValue = value;\n",
              "    return next.value.response;\n",
              "  });\n",
              "}\n",
              "\n",
              "/**\n",
              " * Generator function which is called between each async step of the upload\n",
              " * process.\n",
              " * @param {string} inputId Element ID of the input file picker element.\n",
              " * @param {string} outputId Element ID of the output display.\n",
              " * @return {!Iterable<!Object>} Iterable of next steps.\n",
              " */\n",
              "function* uploadFilesStep(inputId, outputId) {\n",
              "  const inputElement = document.getElementById(inputId);\n",
              "  inputElement.disabled = false;\n",
              "\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  outputElement.innerHTML = '';\n",
              "\n",
              "  const pickedPromise = new Promise((resolve) => {\n",
              "    inputElement.addEventListener('change', (e) => {\n",
              "      resolve(e.target.files);\n",
              "    });\n",
              "  });\n",
              "\n",
              "  const cancel = document.createElement('button');\n",
              "  inputElement.parentElement.appendChild(cancel);\n",
              "  cancel.textContent = 'Cancel upload';\n",
              "  const cancelPromise = new Promise((resolve) => {\n",
              "    cancel.onclick = () => {\n",
              "      resolve(null);\n",
              "    };\n",
              "  });\n",
              "\n",
              "  // Wait for the user to pick the files.\n",
              "  const files = yield {\n",
              "    promise: Promise.race([pickedPromise, cancelPromise]),\n",
              "    response: {\n",
              "      action: 'starting',\n",
              "    }\n",
              "  };\n",
              "\n",
              "  cancel.remove();\n",
              "\n",
              "  // Disable the input element since further picks are not allowed.\n",
              "  inputElement.disabled = true;\n",
              "\n",
              "  if (!files) {\n",
              "    return {\n",
              "      response: {\n",
              "        action: 'complete',\n",
              "      }\n",
              "    };\n",
              "  }\n",
              "\n",
              "  for (const file of files) {\n",
              "    const li = document.createElement('li');\n",
              "    li.append(span(file.name, {fontWeight: 'bold'}));\n",
              "    li.append(span(\n",
              "        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n",
              "        `last modified: ${\n",
              "            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n",
              "                                    'n/a'} - `));\n",
              "    const percent = span('0% done');\n",
              "    li.appendChild(percent);\n",
              "\n",
              "    outputElement.appendChild(li);\n",
              "\n",
              "    const fileDataPromise = new Promise((resolve) => {\n",
              "      const reader = new FileReader();\n",
              "      reader.onload = (e) => {\n",
              "        resolve(e.target.result);\n",
              "      };\n",
              "      reader.readAsArrayBuffer(file);\n",
              "    });\n",
              "    // Wait for the data to be ready.\n",
              "    let fileData = yield {\n",
              "      promise: fileDataPromise,\n",
              "      response: {\n",
              "        action: 'continue',\n",
              "      }\n",
              "    };\n",
              "\n",
              "    // Use a chunked sending to avoid message size limits. See b/62115660.\n",
              "    let position = 0;\n",
              "    do {\n",
              "      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n",
              "      const chunk = new Uint8Array(fileData, position, length);\n",
              "      position += length;\n",
              "\n",
              "      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n",
              "      yield {\n",
              "        response: {\n",
              "          action: 'append',\n",
              "          file: file.name,\n",
              "          data: base64,\n",
              "        },\n",
              "      };\n",
              "\n",
              "      let percentDone = fileData.byteLength === 0 ?\n",
              "          100 :\n",
              "          Math.round((position / fileData.byteLength) * 100);\n",
              "      percent.textContent = `${percentDone}% done`;\n",
              "\n",
              "    } while (position < fileData.byteLength);\n",
              "  }\n",
              "\n",
              "  // All done.\n",
              "  yield {\n",
              "    response: {\n",
              "      action: 'complete',\n",
              "    }\n",
              "  };\n",
              "}\n",
              "\n",
              "scope.google = scope.google || {};\n",
              "scope.google.colab = scope.google.colab || {};\n",
              "scope.google.colab._files = {\n",
              "  _uploadFiles,\n",
              "  _uploadFilesContinue,\n",
              "};\n",
              "})(self);\n",
              "</script> "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Saving house-data.csv to house-data (3).csv\n",
            "           id             date     price  bedrooms  bathrooms  sqft_living  \\\n",
            "0  7129300520  20141013T000000  221900.0         3       1.00         1180   \n",
            "1  6414100192  20141209T000000  538000.0         3       2.25         2570   \n",
            "2  5631500400  20150225T000000  180000.0         2       1.00          770   \n",
            "3  2487200875  20141209T000000  604000.0         4       3.00         1960   \n",
            "4  1954400510  20150218T000000  510000.0         3       2.00         1680   \n",
            "\n",
            "   sqft_lot  floors  waterfront  view  ...  grade  sqft_above  sqft_basement  \\\n",
            "0      5650     1.0           0     0  ...      7        1180              0   \n",
            "1      7242     2.0           0     0  ...      7        2170            400   \n",
            "2     10000     1.0           0     0  ...      6         770              0   \n",
            "3      5000     1.0           0     0  ...      7        1050            910   \n",
            "4      8080     1.0           0     0  ...      8        1680              0   \n",
            "\n",
            "   yr_built  yr_renovated  zipcode      lat     long  sqft_living15  \\\n",
            "0      1955             0    98178  47.5112 -122.257           1340   \n",
            "1      1951          1991    98125  47.7210 -122.319           1690   \n",
            "2      1933             0    98028  47.7379 -122.233           2720   \n",
            "3      1965             0    98136  47.5208 -122.393           1360   \n",
            "4      1987             0    98074  47.6168 -122.045           1800   \n",
            "\n",
            "   sqft_lot15  \n",
            "0        5650  \n",
            "1        7639  \n",
            "2        8062  \n",
            "3        5000  \n",
            "4        7503  \n",
            "\n",
            "[5 rows x 21 columns]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "df = pd.read_csv('./house-data.csv', encoding=\"UTF-8\")\n",
        "df"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 443
        },
        "id": "tg5uLJeI3j1K",
        "outputId": "18c952f7-61a3-4cde-ac3a-bf69a7c3591d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "               id             date     price  bedrooms  bathrooms  \\\n",
              "0      7129300520  20141013T000000  221900.0         3       1.00   \n",
              "1      6414100192  20141209T000000  538000.0         3       2.25   \n",
              "2      5631500400  20150225T000000  180000.0         2       1.00   \n",
              "3      2487200875  20141209T000000  604000.0         4       3.00   \n",
              "4      1954400510  20150218T000000  510000.0         3       2.00   \n",
              "...           ...              ...       ...       ...        ...   \n",
              "21608   263000018  20140521T000000  360000.0         3       2.50   \n",
              "21609  6600060120  20150223T000000  400000.0         4       2.50   \n",
              "21610  1523300141  20140623T000000  402101.0         2       0.75   \n",
              "21611   291310100  20150116T000000  400000.0         3       2.50   \n",
              "21612  1523300157  20141015T000000  325000.0         2       0.75   \n",
              "\n",
              "       sqft_living  sqft_lot  floors  waterfront  view  ...  grade  \\\n",
              "0             1180      5650     1.0           0     0  ...      7   \n",
              "1             2570      7242     2.0           0     0  ...      7   \n",
              "2              770     10000     1.0           0     0  ...      6   \n",
              "3             1960      5000     1.0           0     0  ...      7   \n",
              "4             1680      8080     1.0           0     0  ...      8   \n",
              "...            ...       ...     ...         ...   ...  ...    ...   \n",
              "21608         1530      1131     3.0           0     0  ...      8   \n",
              "21609         2310      5813     2.0           0     0  ...      8   \n",
              "21610         1020      1350     2.0           0     0  ...      7   \n",
              "21611         1600      2388     2.0           0     0  ...      8   \n",
              "21612         1020      1076     2.0           0     0  ...      7   \n",
              "\n",
              "       sqft_above  sqft_basement  yr_built  yr_renovated  zipcode      lat  \\\n",
              "0            1180              0      1955             0    98178  47.5112   \n",
              "1            2170            400      1951          1991    98125  47.7210   \n",
              "2             770              0      1933             0    98028  47.7379   \n",
              "3            1050            910      1965             0    98136  47.5208   \n",
              "4            1680              0      1987             0    98074  47.6168   \n",
              "...           ...            ...       ...           ...      ...      ...   \n",
              "21608        1530              0      2009             0    98103  47.6993   \n",
              "21609        2310              0      2014             0    98146  47.5107   \n",
              "21610        1020              0      2009             0    98144  47.5944   \n",
              "21611        1600              0      2004             0    98027  47.5345   \n",
              "21612        1020              0      2008             0    98144  47.5941   \n",
              "\n",
              "          long  sqft_living15  sqft_lot15  \n",
              "0     -122.257           1340        5650  \n",
              "1     -122.319           1690        7639  \n",
              "2     -122.233           2720        8062  \n",
              "3     -122.393           1360        5000  \n",
              "4     -122.045           1800        7503  \n",
              "...        ...            ...         ...  \n",
              "21608 -122.346           1530        1509  \n",
              "21609 -122.362           1830        7200  \n",
              "21610 -122.299           1020        2007  \n",
              "21611 -122.069           1410        1287  \n",
              "21612 -122.299           1020        1357  \n",
              "\n",
              "[21613 rows x 21 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-67367fe9-c8d4-4307-b44e-ce1e41f73372\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>id</th>\n",
              "      <th>date</th>\n",
              "      <th>price</th>\n",
              "      <th>bedrooms</th>\n",
              "      <th>bathrooms</th>\n",
              "      <th>sqft_living</th>\n",
              "      <th>sqft_lot</th>\n",
              "      <th>floors</th>\n",
              "      <th>waterfront</th>\n",
              "      <th>view</th>\n",
              "      <th>...</th>\n",
              "      <th>grade</th>\n",
              "      <th>sqft_above</th>\n",
              "      <th>sqft_basement</th>\n",
              "      <th>yr_built</th>\n",
              "      <th>yr_renovated</th>\n",
              "      <th>zipcode</th>\n",
              "      <th>lat</th>\n",
              "      <th>long</th>\n",
              "      <th>sqft_living15</th>\n",
              "      <th>sqft_lot15</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>7129300520</td>\n",
              "      <td>20141013T000000</td>\n",
              "      <td>221900.0</td>\n",
              "      <td>3</td>\n",
              "      <td>1.00</td>\n",
              "      <td>1180</td>\n",
              "      <td>5650</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>7</td>\n",
              "      <td>1180</td>\n",
              "      <td>0</td>\n",
              "      <td>1955</td>\n",
              "      <td>0</td>\n",
              "      <td>98178</td>\n",
              "      <td>47.5112</td>\n",
              "      <td>-122.257</td>\n",
              "      <td>1340</td>\n",
              "      <td>5650</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>6414100192</td>\n",
              "      <td>20141209T000000</td>\n",
              "      <td>538000.0</td>\n",
              "      <td>3</td>\n",
              "      <td>2.25</td>\n",
              "      <td>2570</td>\n",
              "      <td>7242</td>\n",
              "      <td>2.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>7</td>\n",
              "      <td>2170</td>\n",
              "      <td>400</td>\n",
              "      <td>1951</td>\n",
              "      <td>1991</td>\n",
              "      <td>98125</td>\n",
              "      <td>47.7210</td>\n",
              "      <td>-122.319</td>\n",
              "      <td>1690</td>\n",
              "      <td>7639</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>5631500400</td>\n",
              "      <td>20150225T000000</td>\n",
              "      <td>180000.0</td>\n",
              "      <td>2</td>\n",
              "      <td>1.00</td>\n",
              "      <td>770</td>\n",
              "      <td>10000</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>6</td>\n",
              "      <td>770</td>\n",
              "      <td>0</td>\n",
              "      <td>1933</td>\n",
              "      <td>0</td>\n",
              "      <td>98028</td>\n",
              "      <td>47.7379</td>\n",
              "      <td>-122.233</td>\n",
              "      <td>2720</td>\n",
              "      <td>8062</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2487200875</td>\n",
              "      <td>20141209T000000</td>\n",
              "      <td>604000.0</td>\n",
              "      <td>4</td>\n",
              "      <td>3.00</td>\n",
              "      <td>1960</td>\n",
              "      <td>5000</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>7</td>\n",
              "      <td>1050</td>\n",
              "      <td>910</td>\n",
              "      <td>1965</td>\n",
              "      <td>0</td>\n",
              "      <td>98136</td>\n",
              "      <td>47.5208</td>\n",
              "      <td>-122.393</td>\n",
              "      <td>1360</td>\n",
              "      <td>5000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>1954400510</td>\n",
              "      <td>20150218T000000</td>\n",
              "      <td>510000.0</td>\n",
              "      <td>3</td>\n",
              "      <td>2.00</td>\n",
              "      <td>1680</td>\n",
              "      <td>8080</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>8</td>\n",
              "      <td>1680</td>\n",
              "      <td>0</td>\n",
              "      <td>1987</td>\n",
              "      <td>0</td>\n",
              "      <td>98074</td>\n",
              "      <td>47.6168</td>\n",
              "      <td>-122.045</td>\n",
              "      <td>1800</td>\n",
              "      <td>7503</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>21608</th>\n",
              "      <td>263000018</td>\n",
              "      <td>20140521T000000</td>\n",
              "      <td>360000.0</td>\n",
              "      <td>3</td>\n",
              "      <td>2.50</td>\n",
              "      <td>1530</td>\n",
              "      <td>1131</td>\n",
              "      <td>3.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>8</td>\n",
              "      <td>1530</td>\n",
              "      <td>0</td>\n",
              "      <td>2009</td>\n",
              "      <td>0</td>\n",
              "      <td>98103</td>\n",
              "      <td>47.6993</td>\n",
              "      <td>-122.346</td>\n",
              "      <td>1530</td>\n",
              "      <td>1509</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>21609</th>\n",
              "      <td>6600060120</td>\n",
              "      <td>20150223T000000</td>\n",
              "      <td>400000.0</td>\n",
              "      <td>4</td>\n",
              "      <td>2.50</td>\n",
              "      <td>2310</td>\n",
              "      <td>5813</td>\n",
              "      <td>2.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>8</td>\n",
              "      <td>2310</td>\n",
              "      <td>0</td>\n",
              "      <td>2014</td>\n",
              "      <td>0</td>\n",
              "      <td>98146</td>\n",
              "      <td>47.5107</td>\n",
              "      <td>-122.362</td>\n",
              "      <td>1830</td>\n",
              "      <td>7200</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>21610</th>\n",
              "      <td>1523300141</td>\n",
              "      <td>20140623T000000</td>\n",
              "      <td>402101.0</td>\n",
              "      <td>2</td>\n",
              "      <td>0.75</td>\n",
              "      <td>1020</td>\n",
              "      <td>1350</td>\n",
              "      <td>2.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>7</td>\n",
              "      <td>1020</td>\n",
              "      <td>0</td>\n",
              "      <td>2009</td>\n",
              "      <td>0</td>\n",
              "      <td>98144</td>\n",
              "      <td>47.5944</td>\n",
              "      <td>-122.299</td>\n",
              "      <td>1020</td>\n",
              "      <td>2007</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>21611</th>\n",
              "      <td>291310100</td>\n",
              "      <td>20150116T000000</td>\n",
              "      <td>400000.0</td>\n",
              "      <td>3</td>\n",
              "      <td>2.50</td>\n",
              "      <td>1600</td>\n",
              "      <td>2388</td>\n",
              "      <td>2.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>8</td>\n",
              "      <td>1600</td>\n",
              "      <td>0</td>\n",
              "      <td>2004</td>\n",
              "      <td>0</td>\n",
              "      <td>98027</td>\n",
              "      <td>47.5345</td>\n",
              "      <td>-122.069</td>\n",
              "      <td>1410</td>\n",
              "      <td>1287</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>21612</th>\n",
              "      <td>1523300157</td>\n",
              "      <td>20141015T000000</td>\n",
              "      <td>325000.0</td>\n",
              "      <td>2</td>\n",
              "      <td>0.75</td>\n",
              "      <td>1020</td>\n",
              "      <td>1076</td>\n",
              "      <td>2.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>7</td>\n",
              "      <td>1020</td>\n",
              "      <td>0</td>\n",
              "      <td>2008</td>\n",
              "      <td>0</td>\n",
              "      <td>98144</td>\n",
              "      <td>47.5941</td>\n",
              "      <td>-122.299</td>\n",
              "      <td>1020</td>\n",
              "      <td>1357</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>21613 rows × 21 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-67367fe9-c8d4-4307-b44e-ce1e41f73372')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-67367fe9-c8d4-4307-b44e-ce1e41f73372 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-67367fe9-c8d4-4307-b44e-ce1e41f73372');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-8293388a-9f68-4728-ae6b-e120645a4df4\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-8293388a-9f68-4728-ae6b-e120645a4df4')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-8293388a-9f68-4728-ae6b-e120645a4df4 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_57ad4406-e371-4a86-9e5b-5c65e394bb7f\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_57ad4406-e371-4a86-9e5b-5c65e394bb7f button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('df');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df"
            }
          },
          "metadata": {},
          "execution_count": 10
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 255
        },
        "id": "bqa0xM2G33MX",
        "outputId": "4d5bdba8-89e9-4dc8-d4ab-1a49a4ddb954"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "           id             date     price  bedrooms  bathrooms  sqft_living  \\\n",
              "0  7129300520  20141013T000000  221900.0         3       1.00         1180   \n",
              "1  6414100192  20141209T000000  538000.0         3       2.25         2570   \n",
              "2  5631500400  20150225T000000  180000.0         2       1.00          770   \n",
              "3  2487200875  20141209T000000  604000.0         4       3.00         1960   \n",
              "4  1954400510  20150218T000000  510000.0         3       2.00         1680   \n",
              "\n",
              "   sqft_lot  floors  waterfront  view  ...  grade  sqft_above  sqft_basement  \\\n",
              "0      5650     1.0           0     0  ...      7        1180              0   \n",
              "1      7242     2.0           0     0  ...      7        2170            400   \n",
              "2     10000     1.0           0     0  ...      6         770              0   \n",
              "3      5000     1.0           0     0  ...      7        1050            910   \n",
              "4      8080     1.0           0     0  ...      8        1680              0   \n",
              "\n",
              "   yr_built  yr_renovated  zipcode      lat     long  sqft_living15  \\\n",
              "0      1955             0    98178  47.5112 -122.257           1340   \n",
              "1      1951          1991    98125  47.7210 -122.319           1690   \n",
              "2      1933             0    98028  47.7379 -122.233           2720   \n",
              "3      1965             0    98136  47.5208 -122.393           1360   \n",
              "4      1987             0    98074  47.6168 -122.045           1800   \n",
              "\n",
              "   sqft_lot15  \n",
              "0        5650  \n",
              "1        7639  \n",
              "2        8062  \n",
              "3        5000  \n",
              "4        7503  \n",
              "\n",
              "[5 rows x 21 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-133d0228-5e06-4a8a-bfa3-4a69fec182af\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>id</th>\n",
              "      <th>date</th>\n",
              "      <th>price</th>\n",
              "      <th>bedrooms</th>\n",
              "      <th>bathrooms</th>\n",
              "      <th>sqft_living</th>\n",
              "      <th>sqft_lot</th>\n",
              "      <th>floors</th>\n",
              "      <th>waterfront</th>\n",
              "      <th>view</th>\n",
              "      <th>...</th>\n",
              "      <th>grade</th>\n",
              "      <th>sqft_above</th>\n",
              "      <th>sqft_basement</th>\n",
              "      <th>yr_built</th>\n",
              "      <th>yr_renovated</th>\n",
              "      <th>zipcode</th>\n",
              "      <th>lat</th>\n",
              "      <th>long</th>\n",
              "      <th>sqft_living15</th>\n",
              "      <th>sqft_lot15</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>7129300520</td>\n",
              "      <td>20141013T000000</td>\n",
              "      <td>221900.0</td>\n",
              "      <td>3</td>\n",
              "      <td>1.00</td>\n",
              "      <td>1180</td>\n",
              "      <td>5650</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>7</td>\n",
              "      <td>1180</td>\n",
              "      <td>0</td>\n",
              "      <td>1955</td>\n",
              "      <td>0</td>\n",
              "      <td>98178</td>\n",
              "      <td>47.5112</td>\n",
              "      <td>-122.257</td>\n",
              "      <td>1340</td>\n",
              "      <td>5650</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>6414100192</td>\n",
              "      <td>20141209T000000</td>\n",
              "      <td>538000.0</td>\n",
              "      <td>3</td>\n",
              "      <td>2.25</td>\n",
              "      <td>2570</td>\n",
              "      <td>7242</td>\n",
              "      <td>2.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>7</td>\n",
              "      <td>2170</td>\n",
              "      <td>400</td>\n",
              "      <td>1951</td>\n",
              "      <td>1991</td>\n",
              "      <td>98125</td>\n",
              "      <td>47.7210</td>\n",
              "      <td>-122.319</td>\n",
              "      <td>1690</td>\n",
              "      <td>7639</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>5631500400</td>\n",
              "      <td>20150225T000000</td>\n",
              "      <td>180000.0</td>\n",
              "      <td>2</td>\n",
              "      <td>1.00</td>\n",
              "      <td>770</td>\n",
              "      <td>10000</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>6</td>\n",
              "      <td>770</td>\n",
              "      <td>0</td>\n",
              "      <td>1933</td>\n",
              "      <td>0</td>\n",
              "      <td>98028</td>\n",
              "      <td>47.7379</td>\n",
              "      <td>-122.233</td>\n",
              "      <td>2720</td>\n",
              "      <td>8062</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2487200875</td>\n",
              "      <td>20141209T000000</td>\n",
              "      <td>604000.0</td>\n",
              "      <td>4</td>\n",
              "      <td>3.00</td>\n",
              "      <td>1960</td>\n",
              "      <td>5000</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>7</td>\n",
              "      <td>1050</td>\n",
              "      <td>910</td>\n",
              "      <td>1965</td>\n",
              "      <td>0</td>\n",
              "      <td>98136</td>\n",
              "      <td>47.5208</td>\n",
              "      <td>-122.393</td>\n",
              "      <td>1360</td>\n",
              "      <td>5000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>1954400510</td>\n",
              "      <td>20150218T000000</td>\n",
              "      <td>510000.0</td>\n",
              "      <td>3</td>\n",
              "      <td>2.00</td>\n",
              "      <td>1680</td>\n",
              "      <td>8080</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>8</td>\n",
              "      <td>1680</td>\n",
              "      <td>0</td>\n",
              "      <td>1987</td>\n",
              "      <td>0</td>\n",
              "      <td>98074</td>\n",
              "      <td>47.6168</td>\n",
              "      <td>-122.045</td>\n",
              "      <td>1800</td>\n",
              "      <td>7503</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows × 21 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-133d0228-5e06-4a8a-bfa3-4a69fec182af')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-133d0228-5e06-4a8a-bfa3-4a69fec182af button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-133d0228-5e06-4a8a-bfa3-4a69fec182af');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-d043702b-6566-4e39-8703-1b71f2f45505\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-d043702b-6566-4e39-8703-1b71f2f45505')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-d043702b-6566-4e39-8703-1b71f2f45505 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df"
            }
          },
          "metadata": {},
          "execution_count": 11
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "rl4OGpuB38A4",
        "outputId": "b1d7f569-56d0-4f08-ec58-4e3f407232eb"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(21613, 21)"
            ]
          },
          "metadata": {},
          "execution_count": 12
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.info()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "_Tg2ymjF4Cmh",
        "outputId": "295af5c4-c173-4fc1-8c74-78990dcb458d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 21613 entries, 0 to 21612\n",
            "Data columns (total 21 columns):\n",
            " #   Column         Non-Null Count  Dtype  \n",
            "---  ------         --------------  -----  \n",
            " 0   id             21613 non-null  int64  \n",
            " 1   date           21613 non-null  object \n",
            " 2   price          21613 non-null  float64\n",
            " 3   bedrooms       21613 non-null  int64  \n",
            " 4   bathrooms      21613 non-null  float64\n",
            " 5   sqft_living    21613 non-null  int64  \n",
            " 6   sqft_lot       21613 non-null  int64  \n",
            " 7   floors         21613 non-null  float64\n",
            " 8   waterfront     21613 non-null  int64  \n",
            " 9   view           21613 non-null  int64  \n",
            " 10  condition      21613 non-null  int64  \n",
            " 11  grade          21613 non-null  int64  \n",
            " 12  sqft_above     21613 non-null  int64  \n",
            " 13  sqft_basement  21613 non-null  int64  \n",
            " 14  yr_built       21613 non-null  int64  \n",
            " 15  yr_renovated   21613 non-null  int64  \n",
            " 16  zipcode        21613 non-null  int64  \n",
            " 17  lat            21613 non-null  float64\n",
            " 18  long           21613 non-null  float64\n",
            " 19  sqft_living15  21613 non-null  int64  \n",
            " 20  sqft_lot15     21613 non-null  int64  \n",
            "dtypes: float64(5), int64(15), object(1)\n",
            "memory usage: 3.5+ MB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.describe()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 320
        },
        "id": "oty55QLxD4Yx",
        "outputId": "91e4492f-4cad-4dd8-d6f7-551a7912b7be"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                 id         price      bedrooms     bathrooms   sqft_living  \\\n",
              "count  2.161300e+04  2.161300e+04  21613.000000  21613.000000  21613.000000   \n",
              "mean   4.580302e+09  5.400881e+05      3.370842      2.114757   2079.899736   \n",
              "std    2.876566e+09  3.671272e+05      0.930062      0.770163    918.440897   \n",
              "min    1.000102e+06  7.500000e+04      0.000000      0.000000    290.000000   \n",
              "25%    2.123049e+09  3.219500e+05      3.000000      1.750000   1427.000000   \n",
              "50%    3.904930e+09  4.500000e+05      3.000000      2.250000   1910.000000   \n",
              "75%    7.308900e+09  6.450000e+05      4.000000      2.500000   2550.000000   \n",
              "max    9.900000e+09  7.700000e+06     33.000000      8.000000  13540.000000   \n",
              "\n",
              "           sqft_lot        floors    waterfront          view     condition  \\\n",
              "count  2.161300e+04  21613.000000  21613.000000  21613.000000  21613.000000   \n",
              "mean   1.510697e+04      1.494309      0.007542      0.234303      3.409430   \n",
              "std    4.142051e+04      0.539989      0.086517      0.766318      0.650743   \n",
              "min    5.200000e+02      1.000000      0.000000      0.000000      1.000000   \n",
              "25%    5.040000e+03      1.000000      0.000000      0.000000      3.000000   \n",
              "50%    7.618000e+03      1.500000      0.000000      0.000000      3.000000   \n",
              "75%    1.068800e+04      2.000000      0.000000      0.000000      4.000000   \n",
              "max    1.651359e+06      3.500000      1.000000      4.000000      5.000000   \n",
              "\n",
              "              grade    sqft_above  sqft_basement      yr_built  yr_renovated  \\\n",
              "count  21613.000000  21613.000000   21613.000000  21613.000000  21613.000000   \n",
              "mean       7.656873   1788.390691     291.509045   1971.005136     84.402258   \n",
              "std        1.175459    828.090978     442.575043     29.373411    401.679240   \n",
              "min        1.000000    290.000000       0.000000   1900.000000      0.000000   \n",
              "25%        7.000000   1190.000000       0.000000   1951.000000      0.000000   \n",
              "50%        7.000000   1560.000000       0.000000   1975.000000      0.000000   \n",
              "75%        8.000000   2210.000000     560.000000   1997.000000      0.000000   \n",
              "max       13.000000   9410.000000    4820.000000   2015.000000   2015.000000   \n",
              "\n",
              "            zipcode           lat          long  sqft_living15     sqft_lot15  \n",
              "count  21613.000000  21613.000000  21613.000000   21613.000000   21613.000000  \n",
              "mean   98077.939805     47.560053   -122.213896    1986.552492   12768.455652  \n",
              "std       53.505026      0.138564      0.140828     685.391304   27304.179631  \n",
              "min    98001.000000     47.155900   -122.519000     399.000000     651.000000  \n",
              "25%    98033.000000     47.471000   -122.328000    1490.000000    5100.000000  \n",
              "50%    98065.000000     47.571800   -122.230000    1840.000000    7620.000000  \n",
              "75%    98118.000000     47.678000   -122.125000    2360.000000   10083.000000  \n",
              "max    98199.000000     47.777600   -121.315000    6210.000000  871200.000000  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-39692f3b-9188-4832-8856-0e7b2670c212\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>id</th>\n",
              "      <th>price</th>\n",
              "      <th>bedrooms</th>\n",
              "      <th>bathrooms</th>\n",
              "      <th>sqft_living</th>\n",
              "      <th>sqft_lot</th>\n",
              "      <th>floors</th>\n",
              "      <th>waterfront</th>\n",
              "      <th>view</th>\n",
              "      <th>condition</th>\n",
              "      <th>grade</th>\n",
              "      <th>sqft_above</th>\n",
              "      <th>sqft_basement</th>\n",
              "      <th>yr_built</th>\n",
              "      <th>yr_renovated</th>\n",
              "      <th>zipcode</th>\n",
              "      <th>lat</th>\n",
              "      <th>long</th>\n",
              "      <th>sqft_living15</th>\n",
              "      <th>sqft_lot15</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>2.161300e+04</td>\n",
              "      <td>2.161300e+04</td>\n",
              "      <td>21613.000000</td>\n",
              "      <td>21613.000000</td>\n",
              "      <td>21613.000000</td>\n",
              "      <td>2.161300e+04</td>\n",
              "      <td>21613.000000</td>\n",
              "      <td>21613.000000</td>\n",
              "      <td>21613.000000</td>\n",
              "      <td>21613.000000</td>\n",
              "      <td>21613.000000</td>\n",
              "      <td>21613.000000</td>\n",
              "      <td>21613.000000</td>\n",
              "      <td>21613.000000</td>\n",
              "      <td>21613.000000</td>\n",
              "      <td>21613.000000</td>\n",
              "      <td>21613.000000</td>\n",
              "      <td>21613.000000</td>\n",
              "      <td>21613.000000</td>\n",
              "      <td>21613.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>4.580302e+09</td>\n",
              "      <td>5.400881e+05</td>\n",
              "      <td>3.370842</td>\n",
              "      <td>2.114757</td>\n",
              "      <td>2079.899736</td>\n",
              "      <td>1.510697e+04</td>\n",
              "      <td>1.494309</td>\n",
              "      <td>0.007542</td>\n",
              "      <td>0.234303</td>\n",
              "      <td>3.409430</td>\n",
              "      <td>7.656873</td>\n",
              "      <td>1788.390691</td>\n",
              "      <td>291.509045</td>\n",
              "      <td>1971.005136</td>\n",
              "      <td>84.402258</td>\n",
              "      <td>98077.939805</td>\n",
              "      <td>47.560053</td>\n",
              "      <td>-122.213896</td>\n",
              "      <td>1986.552492</td>\n",
              "      <td>12768.455652</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>2.876566e+09</td>\n",
              "      <td>3.671272e+05</td>\n",
              "      <td>0.930062</td>\n",
              "      <td>0.770163</td>\n",
              "      <td>918.440897</td>\n",
              "      <td>4.142051e+04</td>\n",
              "      <td>0.539989</td>\n",
              "      <td>0.086517</td>\n",
              "      <td>0.766318</td>\n",
              "      <td>0.650743</td>\n",
              "      <td>1.175459</td>\n",
              "      <td>828.090978</td>\n",
              "      <td>442.575043</td>\n",
              "      <td>29.373411</td>\n",
              "      <td>401.679240</td>\n",
              "      <td>53.505026</td>\n",
              "      <td>0.138564</td>\n",
              "      <td>0.140828</td>\n",
              "      <td>685.391304</td>\n",
              "      <td>27304.179631</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>1.000102e+06</td>\n",
              "      <td>7.500000e+04</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>290.000000</td>\n",
              "      <td>5.200000e+02</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>290.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1900.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>98001.000000</td>\n",
              "      <td>47.155900</td>\n",
              "      <td>-122.519000</td>\n",
              "      <td>399.000000</td>\n",
              "      <td>651.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>2.123049e+09</td>\n",
              "      <td>3.219500e+05</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>1.750000</td>\n",
              "      <td>1427.000000</td>\n",
              "      <td>5.040000e+03</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>7.000000</td>\n",
              "      <td>1190.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1951.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>98033.000000</td>\n",
              "      <td>47.471000</td>\n",
              "      <td>-122.328000</td>\n",
              "      <td>1490.000000</td>\n",
              "      <td>5100.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>3.904930e+09</td>\n",
              "      <td>4.500000e+05</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>2.250000</td>\n",
              "      <td>1910.000000</td>\n",
              "      <td>7.618000e+03</td>\n",
              "      <td>1.500000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>7.000000</td>\n",
              "      <td>1560.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1975.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>98065.000000</td>\n",
              "      <td>47.571800</td>\n",
              "      <td>-122.230000</td>\n",
              "      <td>1840.000000</td>\n",
              "      <td>7620.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>7.308900e+09</td>\n",
              "      <td>6.450000e+05</td>\n",
              "      <td>4.000000</td>\n",
              "      <td>2.500000</td>\n",
              "      <td>2550.000000</td>\n",
              "      <td>1.068800e+04</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>4.000000</td>\n",
              "      <td>8.000000</td>\n",
              "      <td>2210.000000</td>\n",
              "      <td>560.000000</td>\n",
              "      <td>1997.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>98118.000000</td>\n",
              "      <td>47.678000</td>\n",
              "      <td>-122.125000</td>\n",
              "      <td>2360.000000</td>\n",
              "      <td>10083.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>9.900000e+09</td>\n",
              "      <td>7.700000e+06</td>\n",
              "      <td>33.000000</td>\n",
              "      <td>8.000000</td>\n",
              "      <td>13540.000000</td>\n",
              "      <td>1.651359e+06</td>\n",
              "      <td>3.500000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>4.000000</td>\n",
              "      <td>5.000000</td>\n",
              "      <td>13.000000</td>\n",
              "      <td>9410.000000</td>\n",
              "      <td>4820.000000</td>\n",
              "      <td>2015.000000</td>\n",
              "      <td>2015.000000</td>\n",
              "      <td>98199.000000</td>\n",
              "      <td>47.777600</td>\n",
              "      <td>-121.315000</td>\n",
              "      <td>6210.000000</td>\n",
              "      <td>871200.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-39692f3b-9188-4832-8856-0e7b2670c212')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-39692f3b-9188-4832-8856-0e7b2670c212 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-39692f3b-9188-4832-8856-0e7b2670c212');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-adf30f10-2a6b-4520-9c45-3a3610794f2b\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-adf30f10-2a6b-4520-9c45-3a3610794f2b')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-adf30f10-2a6b-4520-9c45-3a3610794f2b button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 8,\n  \"fields\": [\n    {\n      \"column\": \"id\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3436537616.4100027,\n        \"min\": 21613.0,\n        \"max\": 9900000190.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          4580301520.864988,\n          3904930410.0,\n          21613.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"price\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2608803.1528446754,\n        \"min\": 21613.0,\n        \"max\": 7700000.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          540088.1417665294,\n          450000.0,\n          21613.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"bedrooms\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 7638.9680008312425,\n        \"min\": 0.0,\n        \"max\": 21613.0,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          21613.0,\n          3.37084162309721,\n          4.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"bathrooms\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 7640.471736224687,\n        \"min\": 0.0,\n        \"max\": 21613.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          2.1147573219821405,\n          2.25,\n          21613.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"sqft_living\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 7766.85900551995,\n        \"min\": 290.0,\n        \"max\": 21613.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          2079.8997362698374,\n          1910.0,\n          21613.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"sqft_lot\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 578829.9990074945,\n        \"min\": 520.0,\n        \"max\": 1651359.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          15106.967565816869,\n          7618.0,\n          21613.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"floors\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 7640.792167327785,\n        \"min\": 0.5399888951423463,\n        \"max\": 21613.0,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          21613.0,\n          1.4943089807060566,\n          2.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"waterfront\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 7641.294180390358,\n        \"min\": 0.0,\n        \"max\": 21613.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.007541757275713691,\n          1.0,\n          0.08651719772788764\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"view\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 7641.096983567199,\n        \"min\": 0.0,\n        \"max\": 21613.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.23430342849211122,\n          4.0,\n          0.7663175692736122\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"condition\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 7640.336375298775,\n        \"min\": 0.6507430463662071,\n        \"max\": 21613.0,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          21613.0,\n          3.4094295100171195,\n          4.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"grade\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 7639.08603681126,\n        \"min\": 1.0,\n        \"max\": 21613.0,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          21613.0,\n          7.656873178179799,\n          8.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"sqft_above\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 7361.316573579324,\n        \"min\": 290.0,\n        \"max\": 21613.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          1788.3906907879516,\n          1560.0,\n          21613.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"sqft_basement\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 7510.466222812158,\n        \"min\": 0.0,\n        \"max\": 21613.0,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          21613.0,\n          291.5090454818859,\n          4820.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"yr_built\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 7076.1007443477365,\n        \"min\": 29.37341080238659,\n        \"max\": 21613.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          1971.0051357978994,\n          1975.0,\n          21613.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"yr_renovated\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 7546.658183233566,\n        \"min\": 0.0,\n        \"max\": 21613.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          84.40225790033776,\n          2015.0,\n          401.6792400191759\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"zipcode\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 40797.46261995304,\n        \"min\": 53.505026257473084,\n        \"max\": 98199.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          98077.93980474715,\n          98065.0,\n          21613.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"lat\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 7626.954967781561,\n        \"min\": 0.13856371024192418,\n        \"max\": 21613.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          47.56005251931708,\n          47.5718,\n          21613.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"long\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 7678.470015507025,\n        \"min\": -122.519,\n        \"max\": 21613.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          -122.21389640494147,\n          -122.23,\n          21613.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"sqft_living15\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 7112.749157923504,\n        \"min\": 399.0,\n        \"max\": 21613.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          1986.552491556008,\n          1840.0,\n          21613.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"sqft_lot15\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 303839.26467140246,\n        \"min\": 651.0,\n        \"max\": 871200.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          12768.455651691113,\n          7620.0,\n          21613.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 17
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "* Изучите стоимости недвижимости*"
      ],
      "metadata": {
        "id": "H_CP2k5RHw5-"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "print(df['price'].describe())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "M8Fo6MDmHF0B",
        "outputId": "456a45f0-78be-4e74-fdd6-d35b1b6886cd"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "count    2.161300e+04\n",
            "mean     5.400881e+05\n",
            "std      3.671272e+05\n",
            "min      7.500000e+04\n",
            "25%      3.219500e+05\n",
            "50%      4.500000e+05\n",
            "75%      6.450000e+05\n",
            "max      7.700000e+06\n",
            "Name: price, dtype: float64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns"
      ],
      "metadata": {
        "id": "p-RYkygoIvxk"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Изучите стоимости недвижимости**"
      ],
      "metadata": {
        "id": "JjKJ5ZtLLjWU"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "plt.figure(figsize = (6,4))\n",
        "plt.hist(df['price'], bins = 10)\n",
        "plt.xlabel('Стоимость')\n",
        "plt.ylabel('Количество')\n",
        "plt.title('Стоимость недвижимости');"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 410
        },
        "id": "z_PTtx7CIyGk",
        "outputId": "35da5f61-9ab8-4c93-9b95-f7bfffc37677"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 600x400 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.figure(figsize=(6,8))\n",
        "plt.hist(df['price'], bins=100)\n",
        "plt.title('Стоимость недвижимости')\n",
        "plt.xlabel('Цена')\n",
        "plt.ylabel('Количество');"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 718
        },
        "id": "esOxUAMqJCCc",
        "outputId": "6d68b01f-8736-4c39-df95-6f0918191474"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 600x800 with 1 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAiUAAAK9CAYAAAD7WBzFAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuMSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/bCgiHAAAACXBIWXMAAA9hAAAPYQGoP6dpAABIOElEQVR4nO3deVxWdf7//+clCrhwQaiAJIJLqbiVWkqmuSUa2jhak0tKajkVmkuZOpVLTmmWk0ulOZVMn3JKW5yUcUFMbUFTihRHTU1zBU2DS0xR4Xz/6Mf18xI0wIuut/C4327nluec9znn9YbLePo+73OwWZZlCQAAwMMqeLoAAAAAiVACAAAMQSgBAABGIJQAAAAjEEoAAIARCCUAAMAIhBIAAGAEQgkAADACoQQAABiBUAIAAIxAKAEAAEYglAD/n3379umvf/2r6tWrJ19fX9ntdrVr105z5szR2bNnPV0eAJR5FT1dAGCChIQE3X///fLx8dHgwYPVtGlTnT9/Xl9++aXGjRunHTt2aOHChZ4uEwDKNBu/JRjl3f79+9W8eXPVrl1b69atU61atVz27927VwkJCRo1apSHKgSA8oHbNyj3Zs6cqezsbL399tsFAokkNWjQwBlIbDbbVZeOHTs6jzt+/LiGDRum4OBg+fr6qkWLFvrXv/7lcu4DBw7IZrMpPj7eZXtcXJxsNpseeugh57b4+HjZbDZ5e3vrxIkTLu2Tk5OdNWzdutVl39KlS9WqVStVrlxZNWrU0IMPPqgjR44U6OeuXbv0l7/8RTVr1lTlypXVsGFDPfPMM5KkKVOm/G7f169fL0nq2LGjmjZtetWv+ZVc6dhXXnlFNptNBw4ccNm+cuVKtW/fXlWrVpWfn59iYmK0Y8eOQs8dERFRaN2Xfu3zvx/5S6VKlRQREaFx48bp/Pnzznb534tL68nLy1Pz5s0LnHPAgAGqXr269uzZc9Xjly5dqgoVKujNN990bnvooYcUERHh0o9Dhw6pcuXKBY7P79/o0aML9D06Olo2m009e/Z02V6Uz2h+3+bMmaNmzZrJ19dXNWvWVPfu3Z2ftaL+vVi/fr3LZyVfTEyMbDabpkyZUuDaKF+4fYNyb/ny5apXr57uuOOO3237f//3f84/f/HFF1q4cKFeffVV1ahRQ5IUHBwsSTp79qw6duyovXv3asSIEapbt66WLl2qhx56SJmZmVcdddm7d6/++c9/XnG/l5eX3nvvPY0ZM8a5bdGiRfL19dW5c+dc2sbHx2vIkCG67bbbNH36dGVkZGjOnDn66quv9N133ykgIECStG3bNrVv316VKlXS8OHDFRERoX379mn58uV64YUX1KdPHzVo0MB53jFjxqhx48YaPny4c1vjxo1/9+vnTv/3f/+n2NhYRUdH66WXXtKvv/6q+fPn684779R3331X4Ie5JN1yyy168sknJf02QjZp0qRCzz18+HC1b99eOTk5Wr16tV555RX5+vpq2rRpV61n+/btBba/88476ty5s2JiYrR582bdcMMNBdp88803io2N1ZgxY/TXv/71qv2eNGlSge9zPl9fX73//vt6+eWXValSJUnS4cOHlZSUJF9fX5e2xfmMDhs2TPHx8erRo4cefvhhXbx4UV988YU2bdqk1q1bF/nvRWE2btyo//73v1ftM8oRCyjHsrKyLEnWn/70p2Ifu2jRIkuStX///gL7Zs+ebUmy3nvvPee28+fPW1FRUVa1atUsh8NhWZZl7d+/35JkLVq0yNnuL3/5i9W0aVMrLCzMio2NLXC9/v37W82aNXNuP3PmjGW3260BAwZYkqwtW7Y4rxcUFGQ1bdrUOnv2rLP9ihUrLEnWpEmTnNs6dOhg+fn5WT/99JNLP/Ly8grte3h4uEttl7rrrrusJk2aFLrv91zp2Jdfftnla3369GkrICDAeuSRR1zapaenW/7+/gW2W5ZlhYaGWj179nSub9mypcDXvrDvR/6x99xzj3P98u/9uXPnrDp16lg9evQo9PiMjAwrIiLC6tSpk3X+/HmX4w8ePGiFhIRY9957r5Wbm+tyXGxsrBUeHu5cT0tLsypUqOC8zqWfvfDwcOvuu++2atSoYX300UfO7dOmTbPuuOMOKzw83IqJiXFuL+pndN26dZYk64knnijwNS3s83G1vxeff/65Jcn6/PPPndvatGnj7M/kyZMLHIPyhds3KNccDockyc/Pz63n/e9//6uQkBD179/fua1SpUp64oknlJ2drQ0bNhR6XEpKipYuXarp06erQoXC/3oOGjRIu3btcg6df/zxx/L391eXLl1c2m3dulXHjx/X448/7vKv5JiYGDVq1EgJCQmSpBMnTmjjxo0aOnSo6tSp43IOm81W/M5Lys3N1c8//6yff/7Z5bZHcY/NX3799VeXNomJicrMzFT//v1d2nl5ealNmzb6/PPPC5z33LlzBUYLriQ7O1s///yzjhw5ooULFyo9Pb3A1/dSr7/+uk6ePKnJkycXuj8oKEgJCQnavHmzHn/8cZfr9OrVSzVq1NDixYuv+D3PN3HiRLVs2VL3339/ofu9vb01cOBALVq0yLktf7TsckX9jH788cey2WyF9q2kn498n3zyibZs2aIZM2Zc03lQdnD7BuWa3W6XJJ0+fdqt5/3pp5900003Ffghk3+L46effir0uAkTJqh9+/bq2bOnRowYUWibmjVrKiYmRu+8845at26td955R7GxsQWulX+Nhg0bFjhHo0aN9OWXX0qSfvzxR0kq8TyQwuzatUs1a9aUJFWoUEENGjTQ5MmTNWDAgGIdeyX58zM6d+5c6P7872u+3NxcZWZmyt/fvyjla+TIkRo5cqRzfciQIS63yy6VlZWlF198UWPHjr3qbQqHw6GzZ8/qrbfe0vfffy9JGjp0qL7//nvVqlVLubm5V63pyy+/1PLly5WUlKSDBw9esd2QIUPUqlUrHTt2TD/88IOOHTumv/zlL/r73//u0q6on9F9+/YpNDRUgYGBV62vuHJzc/W3v/1NAwcOVPPmzd16bly/CCUo1+x2u0JDQ5WWlubpUrRmzRqtXbtWycnJv9t26NChGjx4sEaOHKmNGzfqrbfe0hdffPEHVFk0ERERznkxJ0+e1Ny5czVo0CDVq1dPbdu2LfKx+ZYuXerySHZeXp6k3+ZxhISEFDhHxYqu/2s7ePCg8vLyCp1nUphx48apW7duys3N1Y4dO/T888/LsiyXEYh8L730kipUqKBx48bp5MmThZ4vNzdXjz/+uKKiovTAAw8452ukpaXps88+06BBgzRp0iTNnj37ijWNHz9e0dHR6ty5c4GJ0Zdq0aKFWrRooXfffVc7d+5U3759C4Q0E7z99ts6cOCAVq9e7elSYBBCCcq9nj17auHChUpOTlZUVJRbzhkeHq5t27YpLy/P5V+iu3btcu6/lGVZmjBhgv785z//7g9tSerRo4d8fX3Vr18/3Xnnnapfv36BUJJ/jd27dxcYUdi9e7dzf7169STJrcGsatWq6tq1q3O9ffv2uvHGG7VmzZrf7d/lx0pSamqqy3r9+vUl/XZb5PK2hcm/1dW6deuilK/IyEjneaOjo5WTk6O//e1veuGFFxQaGupsd/ToUc2ZM0fTp0+Xn5/fFUPJG2+8oW3btiklJUUtWrRQWlqa/vnPf+qtt95Sr1699Pe//12jR4/WkCFD1KJFiwLHL1u2TMnJyfr222+LVP/QoUP16quvKj09XcuXLy+0TVE/o/Xr19fq1at16tQpt42W/Prrr5o6daoef/zxAn8XUL4xpwTl3tNPP62qVavq4YcfVkZGRoH9+/bt05w5c4p1znvuuUfp6en68MMPndsuXryoefPmqVq1arrrrrtc2n/wwQfatm2bpk+fXqTzV6xYUYMHD9a2bds0dOjQQtu0bt1aQUFBWrBggXJycpzbV65cqZ07dyomJkbSb7eDOnTooHfeeafAbQHLTa8xyh/Z8PLycsv5oqOjZbfb9eKLL+rChQsF9l/+yPTSpUsVEBBQ4OteVPlv9L18fszUqVMVHBysRx999IrHZmRk6LnnntOIESOcgSP/Sa/8/z722GNq0aKFHn/88QJf8/zbHAMGDNAtt9xSpHoHDBigI0eOKCgoyOUx9UsV9TPat29fWZalqVOnFjhHST8fc+bM0ZkzZ5yPnAP5GClBuVe/fn0tXrxYDzzwgBo3buzyRtevv/7a+ZhkcQwfPlxvvvmmHnroIaWkpCgiIkIfffSRvvrqK82ePbvAxNo1a9bokUceKXT+x5VMmzZN48aNK/QRU+m3SYsvvfSShgwZorvuukv9+/d3PhIcERHhMkdi7ty5uvPOO9WyZUsNHz5cdevW1YEDB5SQkFBglKIosrOztWrVKknSqVOnNHfuXFWqVMkZhK6V3W7X/PnzNWjQILVs2VL9+vVTzZo1dfDgQSUkJKhdu3Z67bXXlJGRoblz52rp0qXq0KGDPv74Y+c59u/fL+m3d7y0bNnSZV5DcnKyKlas6Lx9M2/ePN16660Fbv+sWbNG77//vry9va9Y61NPPaUqVaro+eefv2IbLy8vvfHGG4qKitKiRYtcgubhw4fl7e1drMdmb7jhBh07dkxeXl5XnIxa1M9op06dNGjQIM2dO1d79uxR9+7dlZeXpy+++EKdOnW64tynq1mzZo1eeOEFVa9evdjHoozz5KM/gEl++OEH65FHHrEiIiIsb29vy8/Pz2rXrp01b94869y5cwXaX+3RR8v67THQIUOGWDVq1LC8vb2tZs2aFXhUNP8R1MqVK1tHjhxx2Xf5Y7f518t/5PdK9Vy+/8MPP7RuvfVWy8fHxwoMDLQGDhxoHT58uMDxaWlp1p///GcrICDA8vX1tRo2bGg999xzhV7r9x4JluRcAgICrHbt2lkrV64stP3lxxblkeB8n3/+uRUdHW35+/tbvr6+Vv369a2HHnrI2rp1q3P/pbVcacl/FDX/+5G/VKhQwapdu7YVGxvr8jXL/1rfcsstLo/FXv5I8fr16y1J1uLFi13qvtJn55FHHrFq1KhhnTx50rKs3x4JlmSNGjXqd4+//JHfyxW2vyifUcuyrIsXL1ovv/yy1ahRI8vb29uqWbOm1aNHDyslJaVA26I8ElyrVi3rzJkzLvsu/T6g/OI18wDKrPXr16tTp05Xvc2Q/9ZU3iYKeB5zSgAAgBGYUwKgzAoODtbAgQOv2uaOO+5wvg4dgGdx+wYAABiB2zcAAMAIhBIAAGAE5pQUQV5eno4ePSo/P79r/gVUAACUJ5Zl6fTp0woNDf3dXzpJKCmCo0ePKiwszNNlAABw3Tp06JBq16591TaEkiLIf7PhoUOHjPzFVgAAmMrhcCgsLKzAm6wLQygpgvxbNna7nVACAEAJFGX6AxNdAQCAEQglAADACIQSAABgBEIJAAAwAqEEAAAYgVACAACMQCgBAABGIJQAAAAjEEoAAIARCCUAAMAIhBIAAGAEQgkAADACoQQAABiBUAIAAIxAKAEAAEYglAAAACMQSgAAgBEIJQAAwAiEEgAAYARCCQAAMAKhBAAAGIFQAgAAjEAoAQAARiCUAAAAIxBKAACAEQglAADACBU9XQCKJ2JCgsv6gRkxHqoEAAD3YqQEAAAYgVACAACMQCgBAABGIJQAAAAjEEoAAIARCCUAAMAIhBIAAGAEQgkAADACoQQAABiBUAIAAIxAKAEAAEYglAAAACMQSgAAgBEIJQAAwAiEEgAAYARCCQAAMAKhBAAAGIFQAgAAjEAoAQAARiCUAAAAIxBKAACAEQglAADACIQSAABgBEIJAAAwAqEEAAAYgVACAACMUNHTBeDaRExIKLDtwIwYD1QCAMC1YaQEAAAYgVACAACMQCgBAABGIJQAAAAjEEoAAIARCCUAAMAIPBJsuMIe+QUAoCxipAQAABiBUAIAAIxAKAEAAEYglAAAACMQSgAAgBEIJQAAwAiEEgAAYARCCQAAMAKhBAAAGIFQAgAAjEAoAQAARiCUAAAAI3g0lMyfP1/NmzeX3W6X3W5XVFSUVq5c6dx/7tw5xcXFqXr16qpWrZr69u2rjIwMl3McPHhQMTExqlKlioKCgjRu3DhdvHjRpc369evVsmVL+fj4qEGDBoqPj/8jugcAAIrBo6Gkdu3amjFjhlJSUrR161Z17txZf/rTn7Rjxw5J0pgxY7R8+XItXbpUGzZs0NGjR9WnTx/n8bm5uYqJidH58+f19ddf61//+pfi4+M1adIkZ5v9+/crJiZGnTp1UmpqqkaPHq2HH35Yq1ev/sP7CwAArsxmWZbl6SIuFRgYqJdffln33XefatasqcWLF+u+++6TJO3atUuNGzdWcnKy2rZtq5UrV6pnz546evSogoODJUkLFizQ+PHjdeLECXl7e2v8+PFKSEhQWlqa8xr9+vVTZmamVq1aVWgNOTk5ysnJca47HA6FhYUpKytLdru9FHtfUMSEhGIfc2BGTClUAgBA8TkcDvn7+xfpZ6gxc0pyc3P1wQcf6MyZM4qKilJKSoouXLigrl27Ots0atRIderUUXJysiQpOTlZzZo1cwYSSYqOjpbD4XCOtiQnJ7ucI79N/jkKM336dPn7+zuXsLAwd3YVAAAUwuOhZPv27apWrZp8fHz06KOP6tNPP1VkZKTS09Pl7e2tgIAAl/bBwcFKT0+XJKWnp7sEkvz9+fuu1sbhcOjs2bOF1jRx4kRlZWU5l0OHDrmjqwAA4CoqerqAhg0bKjU1VVlZWfroo48UGxurDRs2eLQmHx8f+fj4eLQGAADKG4+HEm9vbzVo0ECS1KpVK23ZskVz5szRAw88oPPnzyszM9NltCQjI0MhISGSpJCQEH3zzTcu58t/OufSNpc/sZORkSG73a7KlSuXVrcAAEAxefz2zeXy8vKUk5OjVq1aqVKlSkpKSnLu2717tw4ePKioqChJUlRUlLZv367jx4872yQmJsputysyMtLZ5tJz5LfJPwcAADCDR0dKJk6cqB49eqhOnTo6ffq0Fi9erPXr12v16tXy9/fXsGHDNHbsWAUGBsput2vkyJGKiopS27ZtJUndunVTZGSkBg0apJkzZyo9PV3PPvus4uLinLdfHn30Ub322mt6+umnNXToUK1bt05LlixRQkLxn2oBAAClx6Oh5Pjx4xo8eLCOHTsmf39/NW/eXKtXr9bdd98tSXr11VdVoUIF9e3bVzk5OYqOjtYbb7zhPN7Ly0srVqzQY489pqioKFWtWlWxsbF6/vnnnW3q1q2rhIQEjRkzRnPmzFHt2rX11ltvKTo6+g/vLwAAuDLj3lNiouI8Y+1uvKcEAHA9uy7fUwIAAMo3QgkAADACoQQAABiBUAIAAIxAKAEAAEYglAAAACMQSgAAgBEIJQAAwAiEEgAAYARCCQAAMAKhBAAAGIFQAgAAjEAoAQAARiCUAAAAIxBKAACAEQglAADACIQSAABgBEIJAAAwAqEEAAAYgVACAACMQCgBAABGIJQAAAAjEEoAAIARCCUAAMAIhBIAAGAEQgkAADACoQQAABiBUAIAAIxAKAEAAEYglAAAACMQSgAAgBEIJQAAwAiEEgAAYARCCQAAMAKhBAAAGIFQAgAAjEAoAQAARiCUAAAAIxBKAACAEQglAADACIQSAABgBEIJAAAwAqEEAAAYgVACAACMQCgBAABGIJQAAAAjEEoAAIARCCUAAMAIhBIAAGAEQgkAADACoQQAABiBUAIAAIxAKAEAAEYglAAAACMQSgAAgBEIJQAAwAiEEgAAYARCCQAAMAKhBAAAGIFQAgAAjEAoAQAARiCUAAAAIxBKAACAEQglAADACIQSAABgBEIJAAAwAqEEAAAYgVACAACMQCgBAABGIJQAAAAjEEoAAIARCCUAAMAIhBIAAGAEQgkAADACoQQAABiBUAIAAIxAKAEAAEYglAAAACN4NJRMnz5dt912m/z8/BQUFKTevXtr9+7dLm06duwom83msjz66KMubQ4ePKiYmBhVqVJFQUFBGjdunC5evOjSZv369WrZsqV8fHzUoEEDxcfHl3b3AABAMXg0lGzYsEFxcXHatGmTEhMTdeHCBXXr1k1nzpxxaffII4/o2LFjzmXmzJnOfbm5uYqJidH58+f19ddf61//+pfi4+M1adIkZ5v9+/crJiZGnTp1UmpqqkaPHq2HH35Yq1ev/sP6CgAArq6iJy++atUql/X4+HgFBQUpJSVFHTp0cG6vUqWKQkJCCj3HmjVr9L///U9r165VcHCwbrnlFk2bNk3jx4/XlClT5O3trQULFqhu3bqaNWuWJKlx48b68ssv9eqrryo6Orr0OggAAIrMqDklWVlZkqTAwECX7e+//75q1Kihpk2bauLEifr111+d+5KTk9WsWTMFBwc7t0VHR8vhcGjHjh3ONl27dnU5Z3R0tJKTkwutIycnRw6Hw2UBAACly6MjJZfKy8vT6NGj1a5dOzVt2tS5fcCAAQoPD1doaKi2bdum8ePHa/fu3frkk08kSenp6S6BRJJzPT09/aptHA6Hzp49q8qVK7vsmz59uqZOner2PgIAgCszJpTExcUpLS1NX375pcv24cOHO//crFkz1apVS126dNG+fftUv379Uqll4sSJGjt2rHPd4XAoLCysVK4FAAB+Y8TtmxEjRmjFihX6/PPPVbt27au2bdOmjSRp7969kqSQkBBlZGS4tMlfz5+HcqU2dru9wCiJJPn4+Mhut7ssAACgdHk0lFiWpREjRujTTz/VunXrVLdu3d89JjU1VZJUq1YtSVJUVJS2b9+u48ePO9skJibKbrcrMjLS2SYpKcnlPImJiYqKinJTTwAAwLXyaCiJi4vTe++9p8WLF8vPz0/p6elKT0/X2bNnJUn79u3TtGnTlJKSogMHDuizzz7T4MGD1aFDBzVv3lyS1K1bN0VGRmrQoEH6/vvvtXr1aj377LOKi4uTj4+PJOnRRx/Vjz/+qKefflq7du3SG2+8oSVLlmjMmDEe6zsAAHDl0VAyf/58ZWVlqWPHjqpVq5Zz+fDDDyVJ3t7eWrt2rbp166ZGjRrpySefVN++fbV8+XLnOby8vLRixQp5eXkpKipKDz74oAYPHqznn3/e2aZu3bpKSEhQYmKiWrRooVmzZumtt97icWAAAAxisyzL8nQRpnM4HPL391dWVtYfPr8kYkJCsY85MCOmFCoBAKD4ivMz1IiJrgAAAIQSAABgBEIJAAAwAqEEAAAYgVACAACMQCgBAABGIJQAAAAjEEoAAIARCCUAAMAIhBIAAGAEQgkAADACoQQAABiBUAIAAIxAKAEAAEYglAAAACMQSgAAgBEqeroAuF/EhASX9QMzYjxUCQAARcdICQAAMAKhBAAAGIFQAgAAjEAoAQAARiCUAAAAIxBKAACAEQglAADACIQSAABgBEIJAAAwAqEEAAAYgVACAACMQCgBAABGIJQAAAAjEEoAAIARCCUAAMAIhBIAAGAEQgkAADACoQQAABiBUAIAAIxAKAEAAEYglAAAACMQSgAAgBEIJQAAwAiEEgAAYARCCQAAMAKhBAAAGIFQAgAAjEAoAQAARiCUAAAAIxBKAACAEQglAADACIQSAABgBEIJAAAwAqEEAAAYgVACAACMQCgBAABGIJQAAAAjEEoAAIARCCUAAMAIhBIAAGAEQgkAADACoQQAABiBUAIAAIxAKAEAAEYglAAAACMQSgAAgBEIJQAAwAiEEgAAYARCCQAAMAKhBAAAGIFQAgAAjFDR0wWg9EVMSHBZPzAjxkOVAABwZYyUAAAAIxBKAACAEQglAADACIQSAABgBEIJAAAwAqEEAAAYgVACAACMQCgBAABGIJQAAAAjeDSUTJ8+Xbfddpv8/PwUFBSk3r17a/fu3S5tzp07p7i4OFWvXl3VqlVT3759lZGR4dLm4MGDiomJUZUqVRQUFKRx48bp4sWLLm3Wr1+vli1bysfHRw0aNFB8fHxpdw8AABSDR0PJhg0bFBcXp02bNikxMVEXLlxQt27ddObMGWebMWPGaPny5Vq6dKk2bNigo0ePqk+fPs79ubm5iomJ0fnz5/X111/rX//6l+Lj4zVp0iRnm/379ysmJkadOnVSamqqRo8erYcfflirV6/+Q/sLAACuzGZZluXpIvKdOHFCQUFB2rBhgzp06KCsrCzVrFlTixcv1n333SdJ2rVrlxo3bqzk5GS1bdtWK1euVM+ePXX06FEFBwdLkhYsWKDx48frxIkT8vb21vjx45WQkKC0tDTntfr166fMzEytWrXqd+tyOBzy9/dXVlaW7HZ76XT+Ci7/vTXuwO++AQD8UYrzM9SoOSVZWVmSpMDAQElSSkqKLly4oK5duzrbNGrUSHXq1FFycrIkKTk5Wc2aNXMGEkmKjo6Ww+HQjh07nG0uPUd+m/xzXC4nJ0cOh8NlAQAApcuYUJKXl6fRo0erXbt2atq0qSQpPT1d3t7eCggIcGkbHBys9PR0Z5tLA0n+/vx9V2vjcDh09uzZArVMnz5d/v7+ziUsLMwtfQQAAFdmTCiJi4tTWlqaPvjgA0+XookTJyorK8u5HDp0yNMlAQBQ5lX0dAGSNGLECK1YsUIbN25U7dq1ndtDQkJ0/vx5ZWZmuoyWZGRkKCQkxNnmm2++cTlf/tM5l7a5/ImdjIwM2e12Va5cuUA9Pj4+8vHxcUvfAABA0Xh0pMSyLI0YMUKffvqp1q1bp7p167rsb9WqlSpVqqSkpCTntt27d+vgwYOKioqSJEVFRWn79u06fvy4s01iYqLsdrsiIyOdbS49R36b/HMAAADP8+hISVxcnBYvXqz//Oc/8vPzc84B8ff3V+XKleXv769hw4Zp7NixCgwMlN1u18iRIxUVFaW2bdtKkrp166bIyEgNGjRIM2fOVHp6up599lnFxcU5RzseffRRvfbaa3r66ac1dOhQrVu3TkuWLFFCgvufbAEAACXj0ZGS+fPnKysrSx07dlStWrWcy4cffuhs8+qrr6pnz57q27evOnTooJCQEH3yySfO/V5eXlqxYoW8vLwUFRWlBx98UIMHD9bzzz/vbFO3bl0lJCQoMTFRLVq00KxZs/TWW28pOjr6D+0vAAC4MqPeU2Iq3lMCAEDJXLfvKQEAAOUXoQQAABiBUAIAAIxAKAEAAEYo8SPBubm5WrZsmXbu3ClJatKkie699155eXm5rTgAAFB+lCiU7N27VzExMTp8+LAaNmwo6bffFxMWFqaEhATVr1/frUUCAICyr0S3b5544gnVq1dPhw4d0rfffqtvv/1WBw8eVN26dfXEE0+4u0YAAFAOlGikZMOGDdq0aZMCAwOd26pXr64ZM2aoXbt2bisOAACUHyUaKfHx8dHp06cLbM/Ozpa3t/c1FwUAAMqfEoWSnj17avjw4dq8ebMsy5JlWdq0aZMeffRR3Xvvve6uEQAAlAMlCiVz585V/fr1FRUVJV9fX/n6+qpdu3Zq0KCB5syZ4+4aAQBAOVCiOSUBAQH6z3/+oz179mjXrl2SpMaNG6tBgwZuLQ4AAJQfJX5PiSTddNNNuummmyT99t4SAACAkirR7Zv9+/erf//+euyxx/TLL7/o3nvvlY+Pjxo2bKht27a5u0YAAFAOlCiU/PWvf9XOnTuVlpamzp076/z58/rPf/6jyMhIjR492s0lAgCA8qBEt282b96sL774QuHh4QoMDNSWLVvUsmVLNWjQQG3atHF3jQAAoBwo0UjJ6dOnVatWLfn7+6tKlSoKCAiQ9NsE2MLeXwIAAPB7SjzRddWqVfL391deXp6SkpKUlpamzMxMN5YGAADKkxKHktjYWOef//rXvzr/bLPZrq0iAABQLpUolOTl5bm7DgAAUM6VaE7Ju+++q5ycHHfXAgAAyrEShZIhQ4YoKyvL3bUAAIByrEShxLIsd9cBAADKuRJPdF2yZInsdnuh+wYPHlziggAAQPlU4lAyc+ZMeXl5Fdhus9kIJQAAoNhKHEq2bt2qoKAgd9YCAADKsRLNKQEAAHC3EoWS8PDwQm/dAAAAlFSJbt/s37/f3XUAAIByrkQjJU888YTmzp1bYPtrr72m0aNHX2tNAACgHCpRKPn444/Vrl27AtvvuOMOffTRR9dcFAAAKH9KFEpOnjwpf3//Atvtdrt+/vnnay4KAACUPyUKJQ0aNNCqVasKbF+5cqXq1at3zUUBAIDyp0QTXceOHasRI0boxIkT6ty5syQpKSlJs2bN0uzZs91ZHwAAKCdKFEqGDh2qnJwcvfDCC5o2bZokKSIiQvPnz+dtrgAAoERK/EbXxx57TI899phOnDihypUrq1q1au6sCwAAlDMlfqPrxYsXtXbtWn3yySfO3xp89OhRZWdnu604AABQfpRopOSnn35S9+7ddfDgQeXk5Ojuu++Wn5+fXnrpJeXk5GjBggXurhMAAJRxJRopGTVqlFq3bq1ffvlFlStXdm7/85//rKSkJLcVBwAAyo8SjZR88cUX+vrrr+Xt7e2yPSIiQkeOHHFLYQAAoHwp0UhJXl6ecnNzC2w/fPiw/Pz8rrkoAABQ/pQolHTr1s3lfSQ2m03Z2dmaPHmy7rnnHnfVBgAAypES3b6ZNWuWoqOjFRkZqXPnzmnAgAHas2ePatSooX//+9/urhEAAJQDJQoltWvX1vfff68PPvhA27ZtU3Z2toYNG6aBAwe6THwFAAAoqhK/PK1ixYp68MEH3VkLAAAox0oUSj777LOr7r/33ntLVAwAACi/ShRKevfu7bJus9mcb3W12WyFPpkDAABwNSV+JPjSpUqVKtq7d+8VHxUGAAD4PSX+3TeXstls7jgNAAAox645lBw4cEBnzpzhpWkAAOCalGhOSZ8+fSRJZ8+e1aZNm9SlSxfVrFnTrYUBAIDypUShxN/fX5IUEhKiXr16aejQoW4tCgAAlD8lCiWLFi1ydx0AAKCcK1EocTgcV91vt9tLVAwAACi/ShRKAgICCn3ixrIs3lMCAABKpEShpF69ejp+/LgmTJigdu3aubsmAABQDpUolOzcuVPz5s3TCy+8oO+++04zZ85U3bp13V0bAAAoR0r0npJKlSpp7Nix2rNnj2688UY1b95cTz75pDIzM91cHgAAKC+u6eVpgYGBmj17tr777jsdOHBADRo00OzZs91UGgAAKE9KdPvm1ltvLTDR1bIs5eTk6Mknn9To0aPdURsAAChH3PJbggEAAK5ViULJ5MmT3V0HAAAo53h5GgAAMAIvTwMAAEYoUSiRpI8++kiBgYHurAUAAJRjJQ4l7dq1U1BQkDtrAQAA5ViJQ8n//vc/nTx5UlWrVlVISIi8vb3dWRcAAChnSvzytC5duqhJkyaqW7euqlatqmbNmunVV191Z20AAKAcKdFIyf79+2VZli5cuCCHw6GjR4/qm2++0XPPPaeLFy9q3Lhx7q4TAACUcSUKJeHh4S7rrVq1Uq9evXTzzTfr+eefJ5QAAIBiK/GcksL069dPTZo0cecpAQBAOXFNoSQlJUU7d+6UJEVGRqply5Zq2bKlWwoDAADlS4lCyfHjx9WvXz+tX79eAQEBkqTMzEx16tRJH3zwgWrWrOnOGgEAQDlQoqdvRo4cqdOnT2vHjh06deqUTp06pbS0NDkcDj3xxBPurhEAAJQDJRopWbVqldauXavGjRs7t0VGRur1119Xt27d3FYcAAAoP0o0UpKXl6dKlSoV2F6pUiXl5eVdc1EAAKD8KVEo6dy5s0aNGqWjR486tx05ckRjxoxRly5d3FYcAAAoP0oUSl577TU5HA5FRESofv36ql+/vurWrSuHw6F58+a5u0YAAFAOFGtOyenTp+Xn56ewsDB9++23Wrt2rXbt2iVJaty4sbp27aotW7aodu3apVIsAAAou4o1UtKtWzdlZ2dLkmw2m+6++26NHDlSI0eOVMeOHfXcc8+pXbt2RT7fxo0b1atXL4WGhspms2nZsmUu+x966CHZbDaXpXv37i5tTp06pYEDB8putysgIEDDhg1z1phv27Ztat++vXx9fRUWFqaZM2cWp9sAAOAPUKxQcvr0aXXt2lUOh8Nle1pamm677Ta98847BYLF1Zw5c0YtWrTQ66+/fsU23bt317Fjx5zLv//9b5f9AwcO1I4dO5SYmKgVK1Zo48aNGj58uHO/w+FQt27dFB4erpSUFL388suaMmWKFi5cWOQ6AQBA6SvW7ZvPP/9cnTt31t13363ExET5+flp5syZmjx5svr06aN169bphhtuKPL5evTooR49ely1jY+Pj0JCQgrdt3PnTq1atUpbtmxR69atJUnz5s3TPffco1deeUWhoaF6//33df78eb3zzjvy9vZWkyZNlJqaqn/84x8u4QUAAHhWsUZKatasqXXr1uncuXPq3Lmz7rzzTs2aNUvvvfeeFi9eXKxAUlTr169XUFCQGjZsqMcee0wnT5507ktOTlZAQIAzkEhS165dVaFCBW3evNnZpkOHDvL29na2iY6O1u7du/XLL78Ues2cnBw5HA6XBQAAlK5iP31Ts2ZNJSUl6eLFi0pJSdHGjRt13333lUZt6t69u959910lJSXppZde0oYNG9SjRw/l5uZKktLT0xUUFORyTMWKFRUYGKj09HRnm+DgYJc2+ev5bS43ffp0+fv7O5ewsDB3dw0AAFymRI8E16hRQ+vWrVNkZKQGDBhwxRGHa9WvXz/de++9atasmXr37q0VK1Zoy5YtWr9+falcL9/EiROVlZXlXA4dOlSq1wMAAMWcU9KnTx+Xdbvdro0bN+r2229Xs2bNnNs/+eQT91R3mXr16qlGjRrau3evunTpopCQEB0/ftylzcWLF3Xq1CnnPJSQkBBlZGS4tMlfv9JcFR8fH/n4+JRCDwAAwJUUK5T4+/sXWK9bt65bC7qaw4cP6+TJk6pVq5YkKSoqSpmZmUpJSVGrVq0kSevWrVNeXp7atGnjbPPMM8/owoULzlfjJyYmqmHDhqUyBwYAAJRMsULJokWL3Hrx7Oxs7d2717m+f/9+paamKjAwUIGBgZo6dar69u2rkJAQ7du3T08//bQaNGig6OhoSb+9sK179+565JFHtGDBAl24cEEjRoxQv379FBoaKkkaMGCApk6dqmHDhmn8+PFKS0vTnDlz9Oqrr7q1LwAA4NrYLMuyPHXx9evXq1OnTgW2x8bGav78+erdu7e+++47ZWZmKjQ0VN26ddO0adNcJq6eOnVKI0aM0PLly1WhQgX17dtXc+fOVbVq1Zxttm3bpri4OG3ZskU1atTQyJEjNX78+CLX6XA45O/vr6ysLNnt9mvrdDFFTEgo9WscmBFT6tcAAJRPxfkZ6tFQcr0glAAAUDLF+RlaoqdvAAAA3I1QAgAAjEAoAQAARiCUAAAAIxBKAACAEQglAADACIQSAABgBEIJAAAwAqEEAAAYgVACAACMQCgBAABGIJQAAAAjEEoAAIARCCUAAMAIhBIAAGAEQgkAADACoQQAABiBUAIAAIxAKAEAAEYglAAAACMQSgAAgBEIJQAAwAgVPV0AXEVMSPB0CQAAeAQjJQAAwAiEEgAAYARCCQAAMAKhBAAAGIFQAgAAjEAoAQAARiCUAAAAIxBKAACAEQglAADACIQSAABgBEIJAAAwAqEEAAAYgVACAACMQCgBAABGIJQAAAAjEEoAAIARCCUAAMAIhBIAAGAEQgkAADACoQQAABiBUAIAAIxAKAEAAEYglAAAACNU9HQB8LyICQkFth2YEeOBSgAA5RkjJQAAwAiEEgAAYARCCQAAMAKhBAAAGIFQAgAAjEAoAQAARiCUAAAAIxBKAACAEQglAADACIQSAABgBEIJAAAwAqEEAAAYgVACAACMQCgBAABGIJQAAAAjEEoAAIARCCUAAMAIhBIAAGAEQgkAADACoQQAABiBUAIAAIxAKAEAAEYglAAAACMQSgAAgBEIJQAAwAiEEgAAYARCCQAAMAKhBAAAGIFQAgAAjEAoAQAARiCUAAAAI3g0lGzcuFG9evVSaGiobDabli1b5rLfsixNmjRJtWrVUuXKldW1a1ft2bPHpc2pU6c0cOBA2e12BQQEaNiwYcrOznZps23bNrVv316+vr4KCwvTzJkzS7trAACgmDwaSs6cOaMWLVro9ddfL3T/zJkzNXfuXC1YsECbN29W1apVFR0drXPnzjnbDBw4UDt27FBiYqJWrFihjRs3avjw4c79DodD3bp1U3h4uFJSUvTyyy9rypQpWrhwYan3DwAAFJ3NsizL00VIks1m06effqrevXtL+m2UJDQ0VE8++aSeeuopSVJWVpaCg4MVHx+vfv36aefOnYqMjNSWLVvUunVrSdKqVat0zz336PDhwwoNDdX8+fP1zDPPKD09Xd7e3pKkCRMmaNmyZdq1a1eRanM4HPL391dWVpbsdrv7O3+JiAkJpXr+ojowI8bTJQAAyoDi/Aw1dk7J/v37lZ6erq5duzq3+fv7q02bNkpOTpYkJScnKyAgwBlIJKlr166qUKGCNm/e7GzToUMHZyCRpOjoaO3evVu//PJLodfOycmRw+FwWQAAQOkyNpSkp6dLkoKDg122BwcHO/elp6crKCjIZX/FihUVGBjo0qawc1x6jctNnz5d/v7+ziUsLOzaOwQAAK7K2FDiSRMnTlRWVpZzOXTokKdLAgCgzDM2lISEhEiSMjIyXLZnZGQ494WEhOj48eMu+y9evKhTp065tCnsHJde43I+Pj6y2+0uCwAAKF3GhpK6desqJCRESUlJzm0Oh0ObN29WVFSUJCkqKkqZmZlKSUlxtlm3bp3y8vLUpk0bZ5uNGzfqwoULzjaJiYlq2LChbrjhhj+oNwAA4Pd4NJRkZ2crNTVVqampkn6b3JqamqqDBw/KZrNp9OjR+vvf/67PPvtM27dv1+DBgxUaGup8Qqdx48bq3r27HnnkEX3zzTf66quvNGLECPXr10+hoaGSpAEDBsjb21vDhg3Tjh079OGHH2rOnDkaO3ash3oNAAAKU9GTF9+6das6derkXM8PCrGxsYqPj9fTTz+tM2fOaPjw4crMzNSdd96pVatWydfX13nM+++/rxEjRqhLly6qUKGC+vbtq7lz5zr3+/v7a82aNYqLi1OrVq1Uo0YNTZo0yeVdJgAAwPOMeU+JyXhPCQAAJVMm3lMCAADKF0IJAAAwAqEEAAAYgVACAACMQCgBAABGIJQAAAAjEEoAAIARCCUAAMAIhBIAAGAEQgkAADACoQQAABiBUAIAAIxAKAEAAEYglAAAACMQSgAAgBEIJQAAwAiEEgAAYARCCQAAMEJFTxcAM0VMSHBZPzAjxkOVAADKC0ZKAACAEQglAADACIQSAABgBEIJAAAwAqEEAAAYgVACAACMQCgBAABGIJQAAAAjEEoAAIARCCUAAMAIhBIAAGAEQgkAADACoQQAABiBUAIAAIxAKAEAAEYglAAAACMQSgAAgBEIJQAAwAiEEgAAYARCCQAAMAKhBAAAGIFQAgAAjEAoAQAARiCUAAAAIxBKAACAEQglAADACIQSAABgBEIJAAAwAqEEAAAYgVACAACMQCgBAABGIJQAAAAjEEoAAIARCCUAAMAIhBIAAGAEQgkAADACoQQAABiBUAIAAIxAKAEAAEYglAAAACMQSgAAgBEIJQAAwAgVPV0Arg8RExJc1g/MiPFQJQCAsoqREgAAYARCCQAAMAKhBAAAGIFQAgAAjEAoAQAARiCUAAAAIxBKAACAEQglAADACIQSAABgBEIJAAAwAqEEAAAYgVACAACMQCgBAABGIJQAAAAjEEoAAIARCCUAAMAIRoeSKVOmyGazuSyNGjVy7j937pzi4uJUvXp1VatWTX379lVGRobLOQ4ePKiYmBhVqVJFQUFBGjdunC5evPhHdwUAAPyOip4u4Pc0adJEa9euda5XrPj/lzxmzBglJCRo6dKl8vf314gRI9SnTx999dVXkqTc3FzFxMQoJCREX3/9tY4dO6bBgwerUqVKevHFF//wvgAAgCszPpRUrFhRISEhBbZnZWXp7bff1uLFi9W5c2dJ0qJFi9S4cWNt2rRJbdu21Zo1a/S///1Pa9euVXBwsG655RZNmzZN48eP15QpU+Tt7f1HdwcAAFyB0bdvJGnPnj0KDQ1VvXr1NHDgQB08eFCSlJKSogsXLqhr167Oto0aNVKdOnWUnJwsSUpOTlazZs0UHBzsbBMdHS2Hw6EdO3Zc8Zo5OTlyOBwuCwAAKF1Gh5I2bdooPj5eq1at0vz587V//361b99ep0+fVnp6ury9vRUQEOByTHBwsNLT0yVJ6enpLoEkf3/+viuZPn26/P39nUtYWJh7OwYAAAow+vZNjx49nH9u3ry52rRpo/DwcC1ZskSVK1cutetOnDhRY8eOda47HA6CCQAApczokZLLBQQE6Oabb9bevXsVEhKi8+fPKzMz06VNRkaGcw5KSEhIgadx8tcLm6eSz8fHR3a73WUBAACl67oKJdnZ2dq3b59q1aqlVq1aqVKlSkpKSnLu3717tw4ePKioqChJUlRUlLZv367jx4872yQmJsputysyMvIPrx8AAFyZ0bdvnnrqKfXq1Uvh4eE6evSoJk+eLC8vL/Xv31/+/v4aNmyYxo4dq8DAQNntdo0cOVJRUVFq27atJKlbt26KjIzUoEGDNHPmTKWnp+vZZ59VXFycfHx8PNw7AABwKaNDyeHDh9W/f3+dPHlSNWvW1J133qlNmzapZs2akqRXX31VFSpUUN++fZWTk6Po6Gi98cYbzuO9vLy0YsUKPfbYY4qKilLVqlUVGxur559/3lNdAgAAV2CzLMvydBGmczgc8vf3V1ZWVqnPL4mYkFCq53eXAzNiPF0CAOA6UJyfodfVnBIAAFB2EUoAAIARCCUAAMAIhBIAAGAEQgkAADACoQQAABiBUAIAAIxg9MvTYK7L36fCe0sAANeKkRIAAGAEQgkAADACoQQAABiBUAIAAIxAKAEAAEYglAAAACMQSgAAgBEIJQAAwAiEEgAAYARCCQAAMAKhBAAAGIFQAgAAjEAoAQAARiCUAAAAIxBKAACAEQglAADACIQSAABgBEIJAAAwAqEEAAAYgVACAACMQCgBAABGIJQAAAAjEEoAAIARCCUAAMAIhBIAAGAEQgkAADACoQQAABiBUAIAAIxQ0dMFoGyImJDgsn5gRoyHKgEAXK8YKQEAAEYglAAAACMQSgAAgBEIJQAAwAiEEgAAYARCCQAAMAKhBAAAGIFQAgAAjEAoAQAARiCUAAAAI/CaeQ+7/PXsAACUV4yUAAAAIxBKAACAEQglAADACIQSAABgBEIJAAAwAk/foFQU5amiAzNi/oBKAADXC0ZKAACAEQglAADACIQSAABgBOaUwGMun3fCHBMAKN8YKQEAAEZgpATGYOQEAMo3RkoAAIARCCUAAMAIhBIAAGAEQgkAADACoQQAABiBUAIAAIzAI8EwVmG/1I/HhAGg7GKkBAAAGIFQAgAAjMDtG1xXeOsrAJRdjJQAAAAjMFKCMoWRFAC4fhFKcF0r7Amd39tPUAEAM3H7BgAAGIFQAgAAjMDtG5R7zEMBADMQSlDu/N48FACAZ3D7BgAAGIGREuAy3M4BAM8oV6Hk9ddf18svv6z09HS1aNFC8+bN0+233+7psmC4ooQUggwAXLtyE0o+/PBDjR07VgsWLFCbNm00e/ZsRUdHa/fu3QoKCvJ0eShj3DFvhWADoLyxWZZlebqIP0KbNm1022236bXXXpMk5eXlKSwsTCNHjtSECROueqzD4ZC/v7+ysrJkt9vdWheTLlFUl4eUkozOlOTzRjgCcC2K8zO0XIyUnD9/XikpKZo4caJzW4UKFdS1a1clJycXaJ+Tk6OcnBznelZWlqTfvrDulpfzq9vPibKpzpil17TfXddNmxrtst508urfPcflx1zu8nMU5Rq/d04AZsj/2VmUMZByEUp+/vln5ebmKjg42GV7cHCwdu3aVaD99OnTNXXq1ALbw8LCSq1G4HrhP7v0jylK+5LUAcBzTp8+LX9//6u2KRehpLgmTpyosWPHOtfz8vJ06tQpVa9eXTabrUTndDgcCgsL06FDh9x+C8gEZbl/ZblvUtnuX1num1S2+0ffrl+X98+yLJ0+fVqhoaG/e2y5CCU1atSQl5eXMjIyXLZnZGQoJCSkQHsfHx/5+Pi4bAsICHBLLXa7vUx+CPOV5f6V5b5JZbt/ZblvUtnuH327fl3av98bIclXLl6e5u3trVatWikpKcm5LS8vT0lJSYqKivJgZQAAIF+5GCmRpLFjxyo2NlatW7fW7bffrtmzZ+vMmTMaMmSIp0sDAAAqR6HkgQce0IkTJzRp0iSlp6frlltu0apVqwpMfi0tPj4+mjx5coHbQmVFWe5fWe6bVLb7V5b7JpXt/tG369e19K/cvKcEAACYrVzMKQEAAOYjlAAAACMQSgAAgBEIJQAAwAiEkj/I66+/roiICPn6+qpNmzb65ptvPF2SW2zcuFG9evVSaGiobDabli1b5umS3Gb69Om67bbb5Ofnp6CgIPXu3Vu7d+/2dFluMX/+fDVv3tz5cqOoqCitXLnS02WVihkzZshms2n06NGeLsUtpkyZIpvN5rI0atTI02W51ZEjR/Tggw+qevXqqly5spo1a6atW7d6uqxrFhERUeB7Z7PZFBcX5+nSrllubq6ee+451a1bV5UrV1b9+vU1bdq0Iv2+m0sRSv4AH374ocaOHavJkyfr22+/VYsWLRQdHa3jx497urRrdubMGbVo0UKvv/66p0txuw0bNiguLk6bNm1SYmKiLly4oG7duunMmTOeLu2a1a5dWzNmzFBKSoq2bt2qzp07609/+pN27Njh6dLcasuWLXrzzTfVvHlzT5fiVk2aNNGxY8ecy5dffunpktzml19+Ubt27VSpUiWtXLlS//vf/zRr1izdcMMNni7tmm3ZssXl+5aYmChJuv/++z1c2bV76aWXNH/+fL322mvauXOnXnrpJc2cOVPz5s0r3okslLrbb7/diouLc67n5uZaoaGh1vTp0z1YlftJsj799FNPl1Fqjh8/bkmyNmzY4OlSSsUNN9xgvfXWW54uw21Onz5t3XTTTVZiYqJ11113WaNGjfJ0SW4xefJkq0WLFp4uo9SMHz/euvPOOz1dxh9i1KhRVv369a28vDxPl3LNYmJirKFDh7ps69OnjzVw4MBinYeRklJ2/vx5paSkqGvXrs5tFSpUUNeuXZWcnOzBylBcWVlZkqTAwEAPV+Jeubm5+uCDD3TmzJky9WsX4uLiFBMT4/J3r6zYs2ePQkNDVa9ePQ0cOFAHDx70dElu89lnn6l169a6//77FRQUpFtvvVX//Oc/PV2W250/f17vvfeehg4dWuJf9GqSO+64Q0lJSfrhhx8kSd9//72+/PJL9ejRo1jnKTdvdPWUn3/+Wbm5uQXeHBscHKxdu3Z5qCoUV15enkaPHq127dqpadOmni7HLbZv366oqCidO3dO1apV06effqrIyEhPl+UWH3zwgb799ltt2bLF06W4XZs2bRQfH6+GDRvq2LFjmjp1qtq3b6+0tDT5+fl5urxr9uOPP2r+/PkaO3as/va3v2nLli164okn5O3trdjYWE+X5zbLli1TZmamHnroIU+X4hYTJkyQw+FQo0aN5OXlpdzcXL3wwgsaOHBgsc5DKAGKIC4uTmlpaWXq3n3Dhg2VmpqqrKwsffTRR4qNjdWGDRuu+2By6NAhjRo1SomJifL19fV0OW536b88mzdvrjZt2ig8PFxLlizRsGHDPFiZe+Tl5al169Z68cUXJUm33nqr0tLStGDBgjIVSt5++2316NFDoaGhni7FLZYsWaL3339fixcvVpMmTZSamqrRo0crNDS0WN83Qkkpq1Gjhry8vJSRkeGyPSMjQyEhIR6qCsUxYsQIrVixQhs3blTt2rU9XY7beHt7q0GDBpKkVq1aacuWLZozZ47efPNND1d2bVJSUnT8+HG1bNnSuS03N1cbN27Ua6+9ppycHHl5eXmwQvcKCAjQzTffrL1793q6FLeoVatWgWDcuHFjffzxxx6qyP1++uknrV27Vp988omnS3GbcePGacKECerXr58kqVmzZvrpp580ffr0YoUS5pSUMm9vb7Vq1UpJSUnObXl5eUpKSipT9+/LIsuyNGLECH366adat26d6tat6+mSSlVeXp5ycnI8XcY169Kli7Zv367U1FTn0rp1aw0cOFCpqallKpBIUnZ2tvbt26datWp5uhS3aNeuXYFH73/44QeFh4d7qCL3W7RokYKCghQTE+PpUtzm119/VYUKrpHCy8tLeXl5xToPIyV/gLFjxyo2NlatW7fW7bffrtmzZ+vMmTMaMmSIp0u7ZtnZ2S7/Qtu/f79SU1MVGBioOnXqeLCyaxcXF6fFixfrP//5j/z8/JSeni5J8vf3V+XKlT1c3bWZOHGievTooTp16uj06dNavHix1q9fr9WrV3u6tGvm5+dXYN5P1apVVb169TIxH+ipp55Sr169FB4erqNHj2ry5Mny8vJS//79PV2aW4wZM0Z33HGHXnzxRf3lL3/RN998o4ULF2rhwoWeLs0t8vLytGjRIsXGxqpixbLzI7hXr1564YUXVKdOHTVp0kTfffed/vGPf2jo0KHFO5EbnwjCVcybN8+qU6eO5e3tbd1+++3Wpk2bPF2SW3z++eeWpAJLbGysp0u7ZoX1S5K1aNEiT5d2zYYOHWqFh4db3t7eVs2aNa0uXbpYa9as8XRZpaYsPRL8wAMPWLVq1bK8vb2tG2+80XrggQesvXv3erost1q+fLnVtGlTy8fHx2rUqJG1cOFCT5fkNqtXr7YkWbt37/Z0KW7lcDisUaNGWXXq1LF8fX2tevXqWc8884yVk5NTrPPYLKuYr1sDAAAoBcwpAQAARiCUAAAAIxBKAACAEQglAADACIQSAABgBEIJAAAwAqEEAAAYgVACAEA5t3HjRvXq1UuhoaGy2WxatmxZsc9hWZZeeeUV3XzzzfLx8dGNN96oF154oVjnKDvvuAUAACVy5swZtWjRQkOHDlWfPn1KdI5Ro0ZpzZo1euWVV9SsWTOdOnVKp06dKtY5eKMrAI976KGHlJmZWeBfZ+vXr1enTp30yy+/KCAgwCO1AeWNzWbTp59+qt69ezu35eTk6JlnntG///1vZWZmqmnTpnrppZfUsWNHSdLOnTvVvHlzpaWlqWHDhiW+NrdvAADAVY0YMULJycn64IMPtG3bNt1///3q3r279uzZI0lavny56tWrpxUrVqhu3bqKiIjQww8/XOyREkIJgOtGZmamHn74YdWsWVN2u12dO3fW999/79w/ZcoU3XLLLS7HrF+/XjabTZmZmZKkkydPqn///rrxxhtVpUoVNWvWTP/+97//wF4A15eDBw9q0aJFWrp0qdq3b6/69evrqaee0p133qlFixZJkn788Uf99NNPWrp0qd59913Fx8crJSVF9913X7GuxZwSANeN+++/X5UrV9bKlSvl7++vN998U126dNEPP/ygwMDAIp3j3LlzatWqlcaPHy+73a6EhAQNGjRI9evX1+23317KPQCuP9u3b1dubq5uvvlml+05OTmqXr26JCkvL085OTl69913ne3efvtttWrVSrt37y7yLR1CCYDrwpdffqlvvvlGx48fl4+PjyTplVde0bJly/TRRx9p+PDhRTrPjTfeqKeeesq5PnLkSK1evVpLliwhlACFyM7OlpeXl1JSUuTl5eWyr1q1apKkWrVqqWLFii7BpXHjxpJ+G2khlAAoU77//ntlZ2c7/2WW7+zZs9q3b59zffv27c7/UUpSbm6uS/vc3Fy9+OKLWrJkiY4cOaLz588rJydHVapUKd0OANepW2+9Vbm5uTp+/Ljat29faJt27drp4sWL2rdvn+rXry9J+uGHHyRJ4eHhRb4WoQTAdSE7O1u1atXS+vXrC+y79Mmchg0b6rPPPnOub968WQ8++KBz/eWXX9acOXM0e/ZsNWvWTFWrVtXo0aN1/vz50iwfMFp2drb27t3rXN+/f79SU1MVGBiom2++WQMHDtTgwYM1a9Ys3XrrrTpx4oSSkpLUvHlzxcTEqGvXrmrZsqWGDh2q2bNnKy8vT3Fxcbr77rsL3Pa5GkIJgOtCy5YtlZ6erooVKyoiIuKK7by9vdWgQQPn+uHDh132f/XVV/rTn/7kDCp5eXn64YcfFBkZWSp1A9eDrVu3qlOnTs71sWPHSpJiY2MVHx+vRYsW6e9//7uefPJJHTlyRDVq1FDbtm3Vs2dPSVKFChW0fPlyjRw5Uh06dFDVqlXVo0cPzZo1q1h1EEoAGCErK0upqaku2/L/5bZ9+3a1bdtWUVFR6t27t2bOnKmbb75ZR48eVUJCgv785z+rdevWRbrOTTfdpI8++khff/21brjhBv3jH/9QRkYGoQTlWseOHXW115ZVqlRJU6dO1dSpU6/YJjQ0VB9//PE11UEoAWCE9evX69Zbby10X4cOHfT555/rv//9r5555hkNGTJEJ06cUEhIiDp06KDg4OAiX+fZZ5/Vjz/+qOjoaFWpUkXDhw9X7969lZWV5a6uACgh3ugKwHgRERGKj493vj0SQNnEy9MAGC8yMtLliRoAZRMjJQAAwAiMlAAAACMQSgAAgBEIJQAAwAiEEgAAYARCCQAAMAKhBAAAGIFQAgAAjEAoAQAARiCUAAAAI/w/wEGCq7JN3MsAAAAASUVORK5CYII=\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Вывод:\n",
        "Зависимость количества домов от их цены:\n",
        "\n",
        "Анализ данных показывает, что количество объектов недвижимости растет с\n",
        "\n",
        "\n",
        "\n",
        "1.    увеличением их цены. Это может указывать на то, что на рынке представлено больше предложений в более высоком ценовом сегменте\n",
        "2.   Наибольшее количество недвижимости продается в ценовом диапазоне до 700 000 - 1 000 000 денежных единиц. Основная часть предложений сосредоточена в диапазоне до 2 000 000 денежных единиц. Это свидетельствует о том, что большинство объектов находятся в средней ценовой категории, в то время как более дорогие объекты встречаются реже.\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "id": "3YQ1wusnKCx9"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Изучите распределение квадратуры жилой**"
      ],
      "metadata": {
        "id": "e1D_j499LbHj"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "plt.figure(figsize = (6,4))\n",
        "sns.histplot(df['sqft_living'], bins = 100)\n",
        "plt.xlabel('Квадратные метры')\n",
        "plt.ylabel('Количество')\n",
        "plt.title('Распределение жилой квадратуры');"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 410
        },
        "id": "fiVROX9MKdR-",
        "outputId": "4cc67aa0-1bb2-4605-f545-26bbde28a913"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 600x400 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Вывод:\n",
        "*Распределение жилой площади недвижимости:*\n",
        "\n",
        "1.   Максимальное количество недвижимости продается с жилой площадью от ~1700 до 2300 кв.м., основная часть недвижимости продается с жилой площадью от ~500 до 6000 кв.м.\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "id": "-3l5OUhtLFes"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Изучите распределение года постройки**"
      ],
      "metadata": {
        "id": "8nrXnO1QMDxb"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "plt.figure(figsize=(10, 6))\n",
        "sns.histplot(df['yr_built'], bins=30, kde=True)\n",
        "plt.title('Распределение года постройки недвижимости')\n",
        "plt.xlabel('Год постройки')\n",
        "plt.ylabel('Частота')\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 564
        },
        "id": "ofkn2-k-MFR0",
        "outputId": "98354d2e-4390-49fc-f6d5-0d69f5251ac3"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data_yr = df['yr_built'].value_counts(ascending=True)\n",
        "data_yr.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 272
        },
        "id": "pOVvvAR5MUzk",
        "outputId": "912c999b-5710-4b4b-fc49-a4a30c8f7b1b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "yr_built\n",
              "1934    21\n",
              "1935    24\n",
              "1902    27\n",
              "1901    29\n",
              "1933    30\n",
              "Name: count, dtype: int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>count</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>yr_built</th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>1934</th>\n",
              "      <td>21</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1935</th>\n",
              "      <td>24</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1902</th>\n",
              "      <td>27</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1901</th>\n",
              "      <td>29</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1933</th>\n",
              "      <td>30</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 31
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "years_list = [1900+i*10 for i in range (0,13)]"
      ],
      "metadata": {
        "id": "E1SGciKPMwES"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "plt.figure(figsize=(16, 6))\n",
        "plt.bar(names, values, width=0.7, facecolor='c', alpha=0.75)\n",
        "plt.title('Годы постройки домов')\n",
        "plt.xlabel('Годы')\n",
        "plt.ylabel('Количество домов')\n",
        "plt.grid(True)\n",
        "plt.xticks(yr_list, rotation=40)\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 584
        },
        "id": "GpRmhHeqMzpM",
        "outputId": "f5584584-3764-4431-c0a7-bba75a9573af"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1600x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Вывод:\n",
        "*Периоды кризиса строительства:*\n",
        "\n",
        "\n",
        "1.   Середина 30-х годов: Падение активности в строительстве, вероятно, связано с экономическим спадом Великой депрессии.\n",
        "Начало 70-х годов: Замедление темпов строительства, возможно, вызванное экономическими трудностями и мировыми энергетическими кризисами.\n",
        "Пики строительства:\n",
        "2.   Конец 60-х и начало 70-х годов: Значительный рост активности в строительстве, возможно, вызванный экономическим бумом послевоенного периода и расширением городской инфраструктуры.\n",
        "Середина 2000-х годов: Высокий уровень строительства, что может быть связано с экономическим ростом и повышением спроса на недвижимость.\n",
        "\n"
      ],
      "metadata": {
        "id": "HMFwOOhN6a0M"
      }
    }
  ]
}
